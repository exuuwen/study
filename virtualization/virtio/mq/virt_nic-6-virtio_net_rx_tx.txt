virtio传输数据总是
a. 首先guest将buffer放到vring的desc上然后更新avail ring
virtqueue_add_inbuf/virtqueue_add_outbuf---->virtqueue_add
{
	/*desc ring空间不够*/
	if (vq->vq.num_free < total_sg) {
		return -ENOSPC;
	}	
	/*output: 将buffer放到desc上*/
	for (n = 0; n < out_sgs; n++) {
		for (sg = sgs[n]; sg; sg = next(sg, &total_out)) {
			vq->vring.desc[i].flags = VRING_DESC_F_NEXT;
			vq->vring.desc[i].addr = sg_phys(sg);
			vq->vring.desc[i].len = sg->length;
			prev = i;
			i = vq->vring.desc[i].next;
		}
	}

	/*input: 将input放到desc上*/
	for (; n < (out_sgs + in_sgs); n++) {
		for (sg = sgs[n]; sg; sg = next(sg, &total_in)) {
			vq->vring.desc[i].flags = VRING_DESC_F_NEXT|VRING_DESC_F_WRITE;
			vq->vring.desc[i].addr = sg_phys(sg);
			vq->vring.desc[i].len = sg->length;
			prev = i;
			i = vq->vring.desc[i].next;
		}
	}

	/* Last one doesn't continue. */
	vq->vring.desc[prev].flags &= ~VRING_DESC_F_NEXT;

	/* Update 空闲头 */
	vq->free_head = i;

	/* Set token. */
	vq->data[head] = data;

	/*update idx, 设置desc head 存放在avail->ring[idx]的*/
	avail = (vq->vring.avail->idx & (vq->vring.num-1));
	vq->vring.avail->ring[avail] = head;

	virtio_wmb(vq->weak_barriers);
	vq->vring.avail->idx++;
	vq->num_added++;
}

b. 在宿主机上得到通知, 处理avail ring对应的buffer, 然后将其放到used ring上再通知guest
1). vhost接收avail buffer
int vhost_get_vq_desc()
{
	/* Check it isn't doing very strange things with descriptor numbers. */
	last_avail_idx = vq->last_avail_idx;
	__get_user(vq->avail_idx, &vq->avail->idx);

	/*no new avail buffer*/
	if (vq->avail_idx == last_avail_idx)
		return vq->num;

	/*获得avail desc header, 每一个avail可能包含多个desc 但是header在avail->ring[idx]*/
	__get_user(head, &vq->avail->ring[last_avail_idx % vq->num]

	i = head;
	do {
		/*读取转换所有的desc.addr到iov[]中*/
		ret = translate_desc(vq, desc.addr, desc.len, iov + iov_count,
				     iov_size - iov_count);
	}while ((i = next_desc(&desc)) != -1);
}

int get_rx_bufs()
{
	while (datalen > 0 && headcount < quota) {
		r = vhost_get_vq_desc(vq, vq->iov + seg,
				      ARRAY_SIZE(vq->iov) - seg, &out,
				      &in, log, log_num);	
		/*记录到vring_used_elem, 使得处理完后写回used ring*/
		heads[headcount].id = d;
		heads[headcount].len = iov_length(vq->iov + seg, in);
		datalen -= heads[headcount].len;
		++headcount;
	}
}

2). vhost 处理好buffer后放回到used ring
int __vhost_add_used_n(struct vhost_virtqueue *vq,
			    struct vring_used_elem *heads,
			    unsigned count)
{
	start = vq->last_used_idx % vq->num;
	used = vq->used->ring + start;

	/*记录used ring数据*/
	_copy_to_user(used, heads, count * sizeof *used);

	//update used_idx	
	vq->last_used_idx += count;	
	put_user(vq->last_used_idx, &vq->used->idx);	
}

3). guest得到通知, 回收used ring对应的desc
/*释放ring desc*/
static void detach_buf(struct vring_virtqueue *vq, unsigned int head)
{
	/* Clear data ptr. */
	vq->data[head] = NULL;

	/* Put back on free list: find end */
	i = head;

	while (vq->vring.desc[i].flags & VRING_DESC_F_NEXT) {
		i = vq->vring.desc[i].next;
		vq->vq.num_free++;
	}
	/*连接到free head 头上*/
	vq->vring.desc[i].next = vq->free_head;
	vq->free_head = head;
	/* Plus final descriptor */
	vq->vq.num_free++;
}

void *virtqueue_get_buf(struct virtqueue *_vq, unsigned int *len)
{
	if (!vq->last_used_idx != vq->vring.used->idx)
		return NULL;
	
	/*获取used ring数据, desc ring的id*/
	last_used = (vq->last_used_idx & (vq->vring.num - 1));
	i = vq->vring.used->ring[last_used].id;
	*len = vq->vring.used->ring[last_used].len;

	/* detach_buf clears data, so grab it now. */
	ret = vq->data[i];
	detach_buf(vq, i);
	vq->last_used_idx++;

	return ret;
}

2. 接收
接收数据:分配好skb 将数据地址放到ring desc上, 然后更新avail ring idx
当宿主机收到数据后就会获取avail ring idx对应的desc上, 把报文内容copy到其地址上然后放到used ring idx上
最后guest被通知 napi poll后会从used ring idx对应的desc读取报文数据 然后释放这个desc

对于接收而言, 首先需要把预分配好的skb(buffer)放到descrptor上然后更新avail ring
try_fill_recv:把receive queue空闲的desc填满buffer
try_fill_recv--->add_recvbuf_xxx
{
	/*分配skb*/
	skb = __netdev_alloc_skb_ip_align(vi->dev, GOOD_PACKET_LEN, gfp);
	skb_put(skb, GOOD_PACKET_LEN);
	
	/*将skb转为sgvec*/
	skb_to_sgvec(skb, rq->sg + 1, 0, skb->len);

	/*将buffer键入descrptor 然后更新avail ring*/
	virtqueue_add_inbuf(rq->vq, rq->sg, 2, skb, gfp)
}

调用点
a. probe初始化时候
b. napi调用virtnet_poll时候
c. open的时候

int virtnet_poll(struct napi_struct *napi, int budget)
{
	/*接收数据报文, 就是被vhost接收了报文放到used ring上的(回收旧的used ring)*/
	while (received < budget &&
	       (buf = virtqueue_get_buf(rq->vq, &len)) != NULL) {
		receive_buf(rq, buf, len);
		received++;
	}

	/*分配新的skb buffer给desc ring*/
	if (rq->vq->num_free > virtqueue_get_vring_size(rq->vq) / 2) {
		if (!try_fill_recv(rq, GFP_ATOMIC))
			schedule_delayed_work(&vi->refill, 0);
	}		
}

3.发送
发送报文 首先在发送报文的时候会清除掉已经发送的数据 释放used ring idx对应的desc
然后将skb的数据放到ring desc上 更新 avail ring idx, 通知宿主机
宿主机根据avial ring idx的desc读确数据 组成skb报文发送出去, 
然后把相应的desc 放到used ring idx上
static void free_old_xmit_skbs(struct send_queue *sq)
{
	struct sk_buff *skb;
	struct virtnet_info *vi = sq->vq->vdev->priv;

	/*传进去的data是skb, 一个skb可能会占据多个desc, 只有head desc的data保存skb*/
	while ((skb = virtqueue_get_buf(sq->vq, &len)) != NULL) {
		dev_kfree_skb_any(skb);
	}
}

int xmit_skb(struct send_queue *sq, struct sk_buff *skb)
{
	.........
	/*skb转换为sg,放到desc ring上 然后update avail ring*/
	num_sg = skb_to_sgvec(skb, sq->sg + 1, 0, skb->len) + 1;
	return virtqueue_add_outbuf(sq->vq, sq->sg, num_sg, skb, GFP_ATOMIC);
}

static netdev_tx_t start_xmit(struct sk_buff *skb, struct net_device *dev)
{
	struct virtnet_info *vi = netdev_priv(dev);
	int qnum = skb_get_queue_mapping(skb);
	struct send_queue *sq = &vi->sq[qnum];
	int err;

	/*先free掉发送的 used ring*/
	free_old_xmit_skbs(sq);

	/* Try to transmit */
	err = xmit_skb(sq, skb);
}

