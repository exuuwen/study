From c1509b932b768e61c8a318b725ba53269d712a39 Mon Sep 17 00:00:00 2001
From: wenxu <wenxu@ucloud.cn>
Date: Wed, 26 Jan 2022 15:12:02 +0800
Subject: [PATCH 1/8] hosttrackd: daemon add

Signed-off-by: wenxu <wenxu@ucloud.cn>
---
 Makefile.am                 |   2 +
 configure.ac                |   3 +
 hosttrackd/Makefile         |  10 ++
 hosttrackd/hosttrack_main.c | 117 +++++++++++++++++++++++
 hosttrackd/hosttrack_main.h |   7 ++
 hosttrackd/hosttrackd       | 228 ++++++++++++++++++++++++++++++++++++++++++++
 hosttrackd/subdir.am        |  15 +++
 tools/frrcommon.sh.in       |   2 +-
 8 files changed, 383 insertions(+), 1 deletion(-)
 create mode 100644 hosttrackd/Makefile
 create mode 100644 hosttrackd/hosttrack_main.c
 create mode 100644 hosttrackd/hosttrack_main.h
 create mode 100755 hosttrackd/hosttrackd
 create mode 100644 hosttrackd/subdir.am

diff --git a/Makefile.am b/Makefile.am
index 851cefc..cdce3a5 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -158,6 +158,7 @@ include vrrpd/subdir.am
 include vtysh/subdir.am
 include tests/subdir.am
 include tests/topotests/subdir.am
+include hosttrackd/subdir.am
 
 if PKGSRC
 rcdir=@pkgsrcrcdir@
@@ -225,6 +226,7 @@ EXTRA_DIST += \
 	watchfrr/Makefile \
 	zebra/Makefile \
 	vrrpd/Makefile \
+        hosttrackd/Makefile \
 	# end
 
 noinst_HEADERS += defaults.h
diff --git a/configure.ac b/configure.ac
index 745c535..db761c9 100755
--- a/configure.ac
+++ b/configure.ac
@@ -576,6 +576,8 @@ AC_ARG_ENABLE([memory-sanitizer],
   AS_HELP_STRING([--enable-memory-sanitizer], [enable MemorySanitizer support for detecting uninitialized memory reads]))
 AC_ARG_WITH([crypto],
   AS_HELP_STRING([--with-crypto=<internal|openssl>], [choose between different implementations of cryptographic functions(default value is --with-crypto=internal)]))
+AC_ARG_ENABLE([hosttrackd],
+  AS_HELP_STRING([--disable-hosttrackd], [do not build hosttrackd]))
 
 #if openssl, else use the internal
 AS_IF([test x"${with_crypto}" = x"openssl"], [
@@ -2273,6 +2275,7 @@ AM_CONDITIONAL([SHARPD], [test "${enable_sharpd}" = "yes"])
 AM_CONDITIONAL([STATICD], [test "${enable_staticd}" != "no"])
 AM_CONDITIONAL([FABRICD], [test "${enable_fabricd}" != "no"])
 AM_CONDITIONAL([VRRPD], [test "${enable_vrrpd}" != "no"])
+AM_CONDITIONAL([HOSTTRACKD], [test "${enable_hosttrackd}" != "no"])
 
 AC_CONFIG_FILES([Makefile],[sed -e 's/^#AUTODERP# //' -i Makefile])
 
diff --git a/hosttrackd/Makefile b/hosttrackd/Makefile
new file mode 100644
index 0000000..e0a335c
--- /dev/null
+++ b/hosttrackd/Makefile
@@ -0,0 +1,10 @@
+all: ALWAYS
+	@$(MAKE) -s -C .. hosttrackd/hosttrackd
+%: ALWAYS
+	@$(MAKE) -s -C .. hosttrackd/$@
+
+Makefile:
+	#nothing
+ALWAYS:
+.PHONY: ALWAYS makefiles
+.SUFFIXES:
diff --git a/hosttrackd/hosttrack_main.c b/hosttrackd/hosttrack_main.c
new file mode 100644
index 0000000..85d60b0
--- /dev/null
+++ b/hosttrackd/hosttrack_main.c
@@ -0,0 +1,117 @@
+#include <zebra.h>
+
+#include <lib/version.h>
+#include "libfrr.h"
+#include "vrf.h"
+#include "filter.h"
+
+zebra_capabilities_t _caps_p[] = {
+};
+
+struct zebra_privs_t hosttrack_privs = {
+#if defined(FRR_USER) && defined(FRR_GROUP)
+	.user = FRR_USER,
+	.group = FRR_GROUP,
+#endif
+#if defined(VTY_GROUP)
+	.vty_group = VTY_GROUP,
+#endif
+	.caps_p = _caps_p,
+	.cap_num_p = array_size(_caps_p),
+	.cap_num_i = 0};
+
+struct option longopts[] = { { 0 } };
+
+/* Master of threads. */
+struct thread_master *master;
+
+static struct frr_daemon_info hosttrackd_di;
+/* SIGHUP handler. */
+static void sighup(void)
+{
+	zlog_info("SIGHUP received");
+	vty_read_config(NULL, hosttrackd_di.config_file, config_default);
+}
+
+/* SIGINT / SIGTERM handler. */
+static void sigint(void)
+{
+	zlog_notice("Terminating on signal");
+
+	frr_fini();
+
+	exit(0);
+}
+
+/* SIGUSR1 handler. */
+static void sigusr1(void)
+{
+	zlog_rotate();
+}
+
+struct quagga_signal_t hosttrack_signals[] = {
+	{
+		.signal = SIGHUP,
+		.handler = &sighup,
+	},
+	{
+		.signal = SIGUSR1,
+		.handler = &sigusr1,
+	},
+	{
+		.signal = SIGINT,
+		.handler = &sigint,
+	},
+	{
+		.signal = SIGTERM,
+		.handler = &sigint,
+	},
+};
+
+static const struct frr_yang_module_info * hosttrackd_yang_modules[] = {
+	&frr_interface_info,
+};
+
+#define HOSTTRACK_VTY_PORT 2621
+
+FRR_DAEMON_INFO(hosttrackd, HOSTTRACK, .vty_port = HOSTTRACK_VTY_PORT,
+
+		.proghelp = "Implementation of HOSTTRACK.",
+
+		.signals = hosttrack_signals,
+		.n_signals = array_size(hosttrack_signals),
+
+		.privs = &hosttrack_privs, .yang_modules = hosttrackd_yang_modules,
+		.n_yang_modules = array_size(hosttrackd_yang_modules),
+)
+
+int main(int argc, char **argv, char **envp)
+{
+	frr_preinit(&hosttrackd_di, argc, argv);
+	frr_opt_add("", longopts, "");
+
+	while (1) {
+		int opt;
+
+		opt = frr_getopt(argc, argv, NULL);
+
+		if (opt == EOF)
+			break;
+
+		switch (opt) {
+		case 0:
+			break;
+		default:
+			frr_help_exit(1);
+			break;
+		}
+	}
+
+	master = frr_init();
+
+	frr_config_fork();
+	frr_run(master);
+
+	/* Not reached. */
+	return 0;
+}
diff --git a/hosttrackd/hosttrack_main.h b/hosttrackd/hosttrack_main.h
new file mode 100644
index 0000000..efb8061
--- /dev/null
+++ b/hosttrackd/hosttrack_main.h
@@ -0,0 +1,7 @@
+#ifndef __HOSTTRACK_MAIN_H__
+#define __HOSTTRACK_MAIN_H__
+
+extern struct thread_master *master;
+extern struct zebra_privs_t hosttrack_privs;
+
+#endif
diff --git a/hosttrackd/hosttrackd b/hosttrackd/hosttrackd
new file mode 100755
index 0000000..3fbcc44
--- /dev/null
+++ b/hosttrackd/hosttrackd
@@ -0,0 +1,228 @@
+#! /bin/sh
+
+# hosttrackd/hosttrackd - temporary wrapper script for .libs/hosttrackd
+# Generated by libtool (GNU libtool) 2.4.2
+#
+# The hosttrackd/hosttrackd program cannot be directly executed until all the libtool
+# libraries that it depends on are installed.
+#
+# This wrapper script should never be moved out of the build directory.
+# If it is, it will not operate correctly.
+
+# Sed substitution that helps us do robust quoting.  It backslashifies
+# metacharacters that are still active within double-quoted strings.
+sed_quote_subst='s/\([`"$\\]\)/\\\1/g'
+
+# Be Bourne compatible
+if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
+  emulate sh
+  NULLCMD=:
+  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
+  # is contrary to our usage.  Disable this feature.
+  alias -g '${1+"$@"}'='"$@"'
+  setopt NO_GLOB_SUBST
+else
+  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
+fi
+BIN_SH=xpg4; export BIN_SH # for Tru64
+DUALCASE=1; export DUALCASE # for MKS sh
+
+# The HP-UX ksh and POSIX shell print the target directory to stdout
+# if CDPATH is set.
+(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
+
+relink_command="(cd /root/frr-7.2.1; { test -z \"\${LIBRARY_PATH+set}\" || unset LIBRARY_PATH || { LIBRARY_PATH=; export LIBRARY_PATH; }; }; { test -z \"\${COMPILER_PATH+set}\" || unset COMPILER_PATH || { COMPILER_PATH=; export COMPILER_PATH; }; }; { test -z \"\${GCC_EXEC_PREFIX+set}\" || unset GCC_EXEC_PREFIX || { GCC_EXEC_PREFIX=; export GCC_EXEC_PREFIX; }; }; { test -z \"\${LD_RUN_PATH+set}\" || unset LD_RUN_PATH || { LD_RUN_PATH=; export LD_RUN_PATH; }; }; { test -z \"\${LD_LIBRARY_PATH+set}\" || unset LD_LIBRARY_PATH || { LD_LIBRARY_PATH=; export LD_LIBRARY_PATH; }; }; PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin; export PATH; gcc -std=gnu11 -g -O2 -fno-omit-frame-pointer -funwind-tables -Wall -Wextra -Wmissing-prototypes -Wmissing-declarations -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -pthread -o \$progdir/\$file hosttrackd/hosttrack_main.o -Wl,--export-dynamic  lib/.libs/libfrr.so -lcap -lyang -lm -ldl -lcrypt -ljson-c -lsystemd -lrt -pthread -Wl,-rpath -Wl,/root/frr-7.2.1/lib/.libs -Wl,-rpath -Wl,/usr/lib/frr)"
+
+# This environment variable determines our operation mode.
+if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
+  # install mode needs the following variables:
+  generated_by_libtool_version='2.4.2'
+  notinst_deplibs=' lib/libfrr.la'
+else
+  # When we are sourced in execute mode, $file and $ECHO are already set.
+  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
+    file="$0"
+
+# A function that is used when there is no print builtin or printf.
+func_fallback_echo ()
+{
+  eval 'cat <<_LTECHO_EOF
+$1
+_LTECHO_EOF'
+}
+    ECHO="printf %s\\n"
+  fi
+
+# Very basic option parsing. These options are (a) specific to
+# the libtool wrapper, (b) are identical between the wrapper
+# /script/ and the wrapper /executable/ which is used only on
+# windows platforms, and (c) all begin with the string --lt-
+# (application programs are unlikely to have options which match
+# this pattern).
+#
+# There are only two supported options: --lt-debug and
+# --lt-dump-script. There is, deliberately, no --lt-help.
+#
+# The first argument to this parsing function should be the
+# script's ./libtool value, followed by no.
+lt_option_debug=
+func_parse_lt_options ()
+{
+  lt_script_arg0=$0
+  shift
+  for lt_opt
+  do
+    case "$lt_opt" in
+    --lt-debug) lt_option_debug=1 ;;
+    --lt-dump-script)
+        lt_dump_D=`$ECHO "X$lt_script_arg0" | sed -e 's/^X//' -e 's%/[^/]*$%%'`
+        test "X$lt_dump_D" = "X$lt_script_arg0" && lt_dump_D=.
+        lt_dump_F=`$ECHO "X$lt_script_arg0" | sed -e 's/^X//' -e 's%^.*/%%'`
+        cat "$lt_dump_D/$lt_dump_F"
+        exit 0
+      ;;
+    --lt-*)
+        $ECHO "Unrecognized --lt- option: '$lt_opt'" 1>&2
+        exit 1
+      ;;
+    esac
+  done
+
+  # Print the debug banner immediately:
+  if test -n "$lt_option_debug"; then
+    echo "hosttrackd:hosttrackd/hosttrackd:${LINENO}: libtool wrapper (GNU libtool) 2.4.2" 1>&2
+  fi
+}
+
+# Used when --lt-debug. Prints its arguments to stdout
+# (redirection is the responsibility of the caller)
+func_lt_dump_args ()
+{
+  lt_dump_args_N=1;
+  for lt_arg
+  do
+    $ECHO "hosttrackd:hosttrackd/hosttrackd:${LINENO}: newargv[$lt_dump_args_N]: $lt_arg"
+    lt_dump_args_N=`expr $lt_dump_args_N + 1`
+  done
+}
+
+# Core function for launching the target application
+func_exec_program_core ()
+{
+
+      if test -n "$lt_option_debug"; then
+        $ECHO "hosttrackd:hosttrackd/hosttrackd:${LINENO}: newargv[0]: $progdir/$program" 1>&2
+        func_lt_dump_args ${1+"$@"} 1>&2
+      fi
+      exec "$progdir/$program" ${1+"$@"}
+
+      $ECHO "$0: cannot exec $program $*" 1>&2
+      exit 1
+}
+
+# A function to encapsulate launching the target application
+# Strips options in the --lt-* namespace from $@ and
+# launches target application with the remaining arguments.
+func_exec_program ()
+{
+  case " $* " in
+  *\ --lt-*)
+    for lt_wr_arg
+    do
+      case $lt_wr_arg in
+      --lt-*) ;;
+      *) set x "$@" "$lt_wr_arg"; shift;;
+      esac
+      shift
+    done ;;
+  esac
+  func_exec_program_core ${1+"$@"}
+}
+
+  # Parse options
+  func_parse_lt_options "$0" ${1+"$@"}
+
+  # Find the directory that this script lives in.
+  thisdir=`$ECHO "$file" | sed 's%/[^/]*$%%'`
+  test "x$thisdir" = "x$file" && thisdir=.
+
+  # Follow symbolic links until we get to the real thisdir.
+  file=`ls -ld "$file" | sed -n 's/.*-> //p'`
+  while test -n "$file"; do
+    destdir=`$ECHO "$file" | sed 's%/[^/]*$%%'`
+
+    # If there was a directory component, then change thisdir.
+    if test "x$destdir" != "x$file"; then
+      case "$destdir" in
+      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
+      *) thisdir="$thisdir/$destdir" ;;
+      esac
+    fi
+
+    file=`$ECHO "$file" | sed 's%^.*/%%'`
+    file=`ls -ld "$thisdir/$file" | sed -n 's/.*-> //p'`
+  done
+
+  # Usually 'no', except on cygwin/mingw when embedded into
+  # the cwrapper.
+  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=no
+  if test "$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR" = "yes"; then
+    # special case for '.'
+    if test "$thisdir" = "."; then
+      thisdir=`pwd`
+    fi
+    # remove .libs from thisdir
+    case "$thisdir" in
+    *[\\/].libs ) thisdir=`$ECHO "$thisdir" | sed 's%[\\/][^\\/]*$%%'` ;;
+    .libs )   thisdir=. ;;
+    esac
+  fi
+
+  # Try to get the absolute directory name.
+  absdir=`cd "$thisdir" && pwd`
+  test -n "$absdir" && thisdir="$absdir"
+
+  program=lt-'hosttrackd'
+  progdir="$thisdir/.libs"
+
+  if test ! -f "$progdir/$program" ||
+     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | sed 1q`; \
+       test "X$file" != "X$progdir/$program"; }; then
+
+    file="$$-$program"
+
+    if test ! -d "$progdir"; then
+      mkdir "$progdir"
+    else
+      rm -f "$progdir/$file"
+    fi
+
+    # relink executable if necessary
+    if test -n "$relink_command"; then
+      if relink_command_output=`eval $relink_command 2>&1`; then :
+      else
+	printf %s\n "$relink_command_output" >&2
+	rm -f "$progdir/$file"
+	exit 1
+      fi
+    fi
+
+    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
+    { rm -f "$progdir/$program";
+      mv -f "$progdir/$file" "$progdir/$program"; }
+    rm -f "$progdir/$file"
+  fi
+
+  if test -f "$progdir/$program"; then
+    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
+      # Run the actual program with our arguments.
+      func_exec_program ${1+"$@"}
+    fi
+  else
+    # The program doesn't exist.
+    $ECHO "$0: error: \`$progdir/$program' does not exist" 1>&2
+    $ECHO "This script is just a wrapper for $program." 1>&2
+    $ECHO "See the libtool documentation for more information." 1>&2
+    exit 1
+  fi
+fi
diff --git a/hosttrackd/subdir.am b/hosttrackd/subdir.am
new file mode 100644
index 0000000..59f1e83
--- /dev/null
+++ b/hosttrackd/subdir.am
@@ -0,0 +1,15 @@
+#
+# hosttrackd
+#
+
+if HOSTTRACKD
+sbin_PROGRAMS += hosttrackd/hosttrackd
+endif
+
+noinst_HEADERS += \
+	hosttrackd/hosttrack_main.h \
+	# end
+
+
+hosttrackd_hosttrackd_SOURCES = hosttrackd/hosttrack_main.c
+hosttrackd_hosttrackd_LDADD = lib/libfrr.la
diff --git a/tools/frrcommon.sh.in b/tools/frrcommon.sh.in
index 3fc38d4..737e521 100644
--- a/tools/frrcommon.sh.in
+++ b/tools/frrcommon.sh.in
@@ -29,7 +29,7 @@ FRR_VTY_GROUP="@enable_vty_group@" # frrvty
 # - keep zebra first
 # - watchfrr does NOT belong in this list
 
-DAEMONS="zebra bgpd ripd ripngd ospfd ospf6d isisd babeld pimd ldpd nhrpd eigrpd sharpd pbrd staticd bfdd fabricd vrrpd"
+DAEMONS="zebra bgpd ripd ripngd ospfd ospf6d isisd babeld pimd ldpd nhrpd eigrpd sharpd pbrd staticd bfdd fabricd vrrpd hosttrackd"
 RELOAD_SCRIPT="$D_PATH/frr-reload.py"
 
 #
-- 
1.8.3.1

