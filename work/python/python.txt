1. const number
	interger: 2, 3
	decimals: 2.1, 3.2e-2
	
2. const string
	a. double quotation marks: it contains a string in a line and can escape single quotation marks 
	"wsss"
	b. single quotation marks: it contains a string in a line and can escape double quotation marks 
	'wwsss'
	c. three quotation marks: it contains a string in multiple line and can escape single and double quotation marks 
	'''wsss
	   ssdd
	   www'''
	d. escape character: it can escape single and double quotation marks or next line
	1). 'what\'s your name'
	2). 'sssss \
	    sse'
3. each physical line can have serveral logic line, but each logic line should end with semicolon. But the better way is each logic line is in a physical line without semicolon.
   i=5; print i
   or
   i=5
   print i
   
4. operators: the same as C except the followings
	+(addition): number+number and string+strings 2+3 is 5, "ad"+'ss' is 'adss'
	*(multiply): number*number and number*string 2*2 is 4, 'as'*2 is 'asas'
	//(divide for aliquot part): 3//2 is 1 
	**(pow) number**number 2**3 is 8
	not: a=1; not a; the result is false
	or: a=1; b=0; a or b; the result is 1
	and: a=1; b=0; a and b; result is 0
	in:  a='a'; b="ssws"; a in b # a is the member of the container b
	not in: a='a'; b="ssws" a not in b #  a is not the member of the container b
	is: identity. the two object bind to the same one
	is not: 
	a = ['a', 'b']
	b = ['a', 'b']
	a is b
	False
	a = b[:]
	a is b
	False
	a = b
	a is b
	True

	
5. flow control
    a. assignment
	>>> a, b, c = 1, 2, 3
	>>> a,b,c
	(1, 2, 3)

	>>> a, b = b, a #xchg
	>>> a,b,c
	(2, 1, 3)

	b. True False 
	>>> bool(42)
	True

	c. if 
	if a==b:
	  xxxx
	  xxxx
	[elif a>b:
	  xxxx
	else:
	  xxxx]

	d. while
	while xxxx:
	  xxxx
	  xxxx
	[else:
	  xxxx]

	e. for
	for in xxx:
	  xxxx
	  xxxx
	[else:
	  xxxx]

	f. continue and break for loop
	g. pass : an empty operation to avoid empty line

6. function
	a. def: define a function
	def func(a, b=0, c=10):
	  print "a is", a, "b is", b, "c is", c
	  return a+b+c # can without return value
		
	print "func(1, 2, 3)", func(1, 2, 3)
	print "func(25, c=3)", func(25, c=3)
	print "func(b=2, a=1)", func(b=2, a=1)
	
	b. global: using global value
	def func1():
  	  global x
  	  print "x", x
  	  x=2

	x=0
	func1()
	print "x chang to", x

	c. variable parameter
	def varable_param(pos, *args):
          print "pos is %d" %pos
          for option in args:
            print option
	varable_param(10, "a", "b", "se", 2)

	d. pair parameter
	def special_param(*args, **keypar):
          print args
          print keypar
	  print "%(name)d, %(job)s" %keypar

	>>> special_param(1, 2, 3, name=1, job='sss')
	(1, 2, 3)
	{'job': 'sss', 'name': 1}
	1, sss

	>>> lis = ('a', 'b')
	>>> test = {'name': 2, 'job': 'www'}
	>>> special_param(*lis, **test)
	('a', 'b')
	{'job': 'www', 'name': 2}
	2, www

7. some function
	1) exec: executaion a command in string 
	com = 'print "hello"'
	exec com
	
	scope = {}
	exec 'sqrt = 1' in scope
	scope[sqrt]
	1
	
	2) eval calculate a expression from string 
	alg = '2*3'
	print alg, '=', eval(alg)

	3)assert
	assert True

	4)`` or repr: chang a definition to a string
	a = 50
	`a` and repr(a) are "50"

/////////////////////////////////////////////////////////////

8. module
	a. import
	$ vim mymodule.py
	#!/usr/bin/python
    	if __name__ == '__main__':
      	  print 'The mymodule program is being run by itself'
    	else:
      	  print 'The mymodule program has been imported from another module'
   
	def sayhi():
      	  print "hi, this my python module"
 
	version = '0.1'

	$ vim import1.py
	#!/usr/bin/python
	import mymodule # the mymodule.py and import.py are in the same directory

	if __name__ == '__main__':
      	  print 'The import.py program is being run by itself'
	else:
      	  print 'The import.py program has been imported from another module'

   	mymodule.sayhi()
    	print "mymodule.version:", mymodule.version
    
    	$ vim import2.py
	#!/usr/bin/python
	from mymodule import sayhi, version # the mymodule.py and import.py are in the same directory

	if __name__ == '__main__':
	  print 'The import.py program is being run by itself'
	else:
	  print 'The import.py program has been imported from another module'

	sayhi() #call it directly
	print "mymodule.version:", version
    
	import sys as s
	s.argv
    
	b. sys module
	1) sys.argv
	$ ./test.py a b
	sys.argv[0] is 'test.py'
	sys.argv[1] is 'a'
	sys.argv[2] is 'b'
    
	2) sys.path: add a directory to the path and the *py files can be import by the program directly
	path="/home/python/"  #there are mymodule.py in the directory
	sys.path.append(path)
    
	3) sys.exit(number): exit the program abnormally. the number default is zero. 

	4) I/O 
	sys.stdin
	sys.stdout
	sys.stderr
	
	c. os module
	import os
	1)pwd 
	os.getcwd

	2)ls
	os.lisdir

	3)splite a path to a dir path and file path
	os.path.splite(path)

	4) check a path whether a file
	os.path.isfile(path)

	5) check a path whether is a dir
	os.path.isdir(path)

	6) sep
	os.sep: '/' in unix
	os.pathsep: ':' in unix
	os.linesep: '\n' in unix

	d. dir module
	>>> import copy 
	>>> dir(copy)
	dir(copy)
	['Error', 'PyStringMap', '_EmptyClass', '__all__', '__builtins__', '__doc__', '__file__', '__name__', ...]
	1) attribute: __doc__
	>>> print copy.__doc__
	Generic (shallow and deep) copying operations.	
	.....

	2) attribute: __file__
	>>> print copy.__file__
	/usr/lib/python2.7/copy.pyc

	3) attribute: __all__  # function in the modules
	>>> copy.__all__
	['Error', 'copy', 'deepcopy']
	>>> from copy import deepcopy
	>>> copy.copy.__doc__
	"Shallow copy operation on arbitrary Python objects.\n\n
	>> copy.copy.__all__
	['__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__doc__', '__format__', '__get__', '__getattribute__'....]

	e. random
	>>> import random
	1) random
	>>> random.random() # 0-->1
	0.40353140529707454

	
	2) randrange([start,] stop[, step])
	>>> random.randrange(10)
	3
	>>> random.randrange(1, 10, 2)
	5

	3) choice
	>>> random.choice([2, 3, 4, 6, 9])
	4

	4) sample
	>>> random.sample([2, 3, 4, 6, 9], 3)
	[9, 6, 3]

	5) uniform
	>>>  random.uniform(2, 3) # a real number between 2 and 3
	2.4387819534838986

	f. time
	>>> import time
	>>> time1 = (2008, 2, 29, 12, 23, 30, -1, -1, -1) # 2008, 2.29 13:23:30
	>>> data1 = time.mktime(time1)
	1204316610.0

	>>> time.asctime(time1)
	'Sun Feb 29 12:23:30 2008

	>>> time.time() #current time
	1379426685.751153

	>>> time.localtime(1204316610)
	time.struct_time(tm_year=2008, tm_mon=2, tm_mday=29, tm_hour=12, tm_min=23, tm_sec=30, tm_wday=4, tm_yday=60, tm_isdst=0)

	>>> time.sleep(2) # sleep 2 seconds

	>>> time2 = (2009, 5, 29, 18, 20, 15, -1, -1, -1)
	>>> data2 = time.mktime(time2)
	>>> ntime = random.uniform(data1, data2)

	g. set
	>>> set([1, 2, 4, 1, 9, 0, 2])
	set([0, 1, 2, 4, 9])

	>>> a = set([1, 2, 3])
	>>> b = set([2, 3, 4])
	>>>  a | b
	set([1, 2, 3, 4])

	>>> c = a & b
	>>> c
	set([2, 3])

	<<< c <= a
	True

	>>> c >= a
	False


	h. heap
	# vim heap.py
	#!/usr/bin/python

	from heapq import *
	from random import shuffle

	data = range(10)
	shuffle(data)

	heap = []
	for n in data:
  	  heappush(heap, n)

	print heap
	heappush(heap, 1.5)
	print heap

	print "pop", heappop(heap)
	print "heapreplace", heapreplace(heap, 3.5)
	print heap

	# python heap.py
	[0, 1, 2, 3, 4, 9, 5, 7, 6, 8]
	[0, 1, 2, 3, 1.5, 9, 5, 7, 6, 8, 4]
	pop 0
	heapreplace 1
	[1.5, 3, 2, 3.5, 4, 9, 5, 7, 6, 8]


	i. deque
	# vim heap.py
	#!/usr/bin/python
	from collections import deque

	q = deque(range(5))

	print "deque", q

	q.append(5)
	print "append 5", q

	q.appendleft(6)
	print "appendleft 6", q

	print "pop", q.pop()
	print "popleft", q.popleft()

	q.rotate(3)
	print "rotate 3", q

	q.rotate(-1)
	print "rotate -1", q

	# python deque.py
	deque deque([0, 1, 2, 3, 4])
	append 5 deque([0, 1, 2, 3, 4, 5])
	appendleft 6 deque([6, 0, 1, 2, 3, 4, 5])
	pop 5
	popleft 6
	rotate 3 deque([2, 3, 4, 0, 1])
	rotate -1 deque([3, 4, 0, 1, 2])

////////////////////////////////////////////////////////////

9. data structure
	a. list
	namelist = ['apple', 'mango', 'carrot', 'banana']
	1) access
	listname[n]: the n item of the listname, n start with 0.
	listname[n][m]: the m character/subItem of n item of the listname. The item of list can be a list too.
	listname[n:m]: the n to the m-1 item of the listname
	>>> n = [1,2,3,4,5,6,7,8,9,10]
	>> n[-3:-1] #-1 means the last one, -3 means the last three on
	8,9
	n[a:b:c]:step c between a and b. if c is negtive, get values reverse. all the value can be empty, for a is beginning, for b is ending an c is 1
	>>> n[1:9:2] #[2, 4, 6, 8]
	>>> n[-7:-1:2] #[4, 6, 8]
	>>> n[9:1:-2] #[10, 8, 6, 4]
	>>> n[-1:-7:-2] #[10, 8, 6]

	2) operators
	+
	>>> [1, 2, 'a'] + [5, 'w']
	[1, 2, 'a', 5, 'w']

	*
	>>> ['a', 'b'] * 2
	['a', 'b', 'a', 'b']

	==, != , >...
	>>> b = a[:]
	>>> a == b
	True
	>>> b = a
	>>> a == b
	True
	
	in : check sth in sthes
	>>> n = [ ['a', 1], ['b', 2] ]
	>>> ['a', 1] in n
	True

	is: ckeck the identity
	>>> b = a[:]
	>>> a is b
	False
	>>> b = a
	>>> a is b
	True

	del: del the item of the list
	del listname[n]: delete the n item of the listname

	>>> n = ['a', 'b', 'c']
	len: length of the list
	>>> len(n)
	3

	max: the max item in the list
	>>> max(n)
	'c'

	min: the min item in the list
	>>> min(n)
	'a'

	3) function
	count: count of some item
	>>> x = ['a', 'a', 'c', 'd']
	>>> x.count('a') 
	2

	extend: add b list to a
	>>> a = ['a', 'b']
	>>> b = ['m', 'n']
	>>> a.extend(b)
	>>> a
	['a', 'b', 'm', 'n']

	reverse
	>>> a.reverse()
	>>> a
	['n', 'm', 'b', 'a']

	index: return the index of item
	>>> a.index('m')
	1

	insert
	>>> a.insert(2, 'in')
	>>> a
	['n', 'm', 'in', 'b', 'a']

	remove: remove a specific item
	>>> a.remove('in') # a must contans 'in'
	>>> a
	['n', 'm', 'b', 'a']

	pop: pop the last one
	>>> a.pop()
	'a'
	>>> a
	['n', 'm', 'b']

	append: add a item to the end
	>>> a.append('p');
	>>> a
	['n', 'm', 'b', 'p']
	
	sort: sort the listname
	>>> a.sort()
	>>> a
	['b', 'm', 'n', 'p']

	reference and copy
	shoplist = ['apple', 'mango', 'carrot', 'banana']
	mylist = shoplist # mylist is just another name pointing to the same object!
	mylist2 = shoplist[:] # make a copy by doing a full slice

	
	b. tuple: it is same with list but it can't be modified.
	nametuple = ('apple', 'mango', 'carrot', 'banana')
	1) operators
	len(tuplename): length of the tuplename
	in : check sth in sthes
	max(tuplename): the max item in the tuple
	min(tuplename): the min item in the list
	list(tuplename); make a tuple to a list
	==, != , >...

	2) function
	tuplename.count: count of some item
	tuplename.index: return the index of item
	tuplename.sort: sort the listname

	3) access is the same as list

	
	c. dictionary
	1) operators
	add/modify a item
	>>> d = {}
	>>> d[20] = 12
	>>> d['name'] = 'wx'
	>>> d
	{20: 12, 'name': 'wx'}

	dict
	a = dict(name='wx', age=26)
	>>> a
	{'age': 26, 'name': 'wx'}

	delete one: del d['wx']

	length: len(d)


	2) function
	clear
	i)
	>>> x = { "name":'wx' }
	>>> y = x
	>>> x = {}
	>>> y
	{ "name":'wx' }
	>>> x = { "name":'wx' }
	>>> y = x
	>>> x.clear()
	>>> y
	{}

	item
	i) dictname.item() 
	for name, addr in ab.items():
          print 'name %s, addr %s'%(name, addr)
    	ii) ab['key']
    	for key in dicname:
	  print key, "value", dicname[key]

	haskey
	if ab.has_key('jss'):
          print 'jss addr %s'%ab['jss']

	deepcopy 
	from copy import deepcopy
	>>> y = deepcopy(x)

	fromkeys: add new keys and set the value to default value
	>>> x = {}
	>>> x.fromkeys(['name', 'age'], '(empty)')
	>>> x
	{'age': '(empty)', 'name': '(empty)'}

	get: if get a value from key dirctly will cause error. but it will get None or the second parameter through get
	>>> x = {}
	>>> print x.get('name')
	None

	>>> print x.get('name', 'N/A')
	'N/A'

	pop: pop the key one and return the value
	>>> n = {'x':1, 'y':2, 'z', 3}
	>>> n.pop('x')
	1
	>>> n
	{'y':2, 'z':3}

	values: put all the values into a list
	n.values()
	[2, 3]

	update: update the diction from another one
	>>> new = {'x':2, 'z':3}
	>>> old = {'x':1, 'y':2}
	>>> old.update(new)
	>>> old
	{'y': 2, 'x': 2, 'z': 3}
	  
	
	d. string: also is a read only structure
	1) % format
	%(+/-)(0)(a)(.b)x
	x: d, o, f...

	>>> '%10f' %3.14
	'  3.140000'
	>>> '%.2f' %3.14
	'3.14'
	>>> '%10.2f' %3.14
	'      3.14'
	>>> '%010.2f' %3.14
	'0000003.14'
	>>> '%-10.2f' %3.14
	'3.14      '
	>>> '%-+10.2f' %3.14
	'+3.14   

	2) function
	find : return the position of left character of b that ocurr the first in n
	>>> n = 'www snwude  jZeY www'
	>>> n.find('sn')
	4

	lower: return a string with lower
	>>> n.lower()
	'www snwude  jzey www'

	c.replace: return a string with replacement
	>>> n.replace('sn', 'mmmm')
	'www mmmmwude  jZeY www'

	split: split the string n to list as b delimiter
	>>> n.split(b)
	>>> '1+2+3+4+5'.split('+')
	['1', '2', '3', '4', '5']

	strip: return a string with strip both side " " or specific character
	>>> m = "  wss ss  "
	>>> m.strip()
	'wss ss'

	>>> m = '***!ww * ww!w**!'
	>>> m.strip("!*")
	'ww * ww!w'
	
	startwith
	>>> name = 'Swaroop'
	>>> name.startwith('Swar')
	True

	endswith
	name.endswith("roop')
	True

	join
	>>> delimiter="*"
	>>> mylist = ['a','b','c']
	>>> delimiter.join(mylist)
	a*b*c

	3) operators
	in:
    	>>> pm = "ws"
	>> 'w' in pm
	True

	list: string to list
	>>> list("abcd")
	['a', 'b', 'c', 'd']

	e. print with these structure
	1) print provides a space with , and provide "\n" each line
	print "aaa", 16
	print "ddd"
	
	aaa 16
	ddd
	
	2) print without "\n" each line it must be end with a ,
	print "aahha",
	print "wws" 
	
	aahha wws
	
	3) print with item of tuple/list/dic
	print item[n]
	
	4) print with tuple
	print 'this is %s, age %d' %('wx', 26)
	
	5) traverse the tuple/list
	for d in listname/tuplename:
	  print d

////////////////////////////////////////////////////////////

10. class
	1) template
	class Name:
	  value = sth
	  def __init__(self, xx...):
	    self.xx = xx
	    self.xx2 = xx2
	    Name.value += 1

	  def get_xx(self):
	    return self.xx
	
          def get_value(self):
	    return Name.value

	  def __del__(self):
	    xxxxxx

	s = Name(xx..)
	s.get_xx()
	s.get_value()
	Name.value

	2) inheritance
	class Name2(Name):
	  def __init__(self, xx3...):
	    Name.__init__(self)
	    self.xx3 = xx3

	def get_xx(self):
	    return Name.get_xx(self)

11. file
	1) file class
	a. f = file("sth.txt", 'w') #'w', 'a', 'o'
	b. write
	f.write("wwwxwss")	
	f.writelines
	lines = ["last second sentence\n", "last sentence\n"]
	f.writelines(lines)

	c. read 
	i. readline
	while True:
	  line = f.readline()
	  if len(line) == 0:
	    break
  	  print line
	
	ii. read
	print  f.read(10)

	iii. readlines # read the whole file  and make a list according to each line
	print f.readlines()
	
	d. f.close()

	2) pickle class
	a. dump
	import cPickle as p
	p.dump(shoplist, f) #dump a list object to a file boject
	b. store 
	copylist = p.store(f)

12. exception
	1) try...except...else
	try:
	  s = raw_input("Enter something--->")
	except EOFError:
	  print "an EOF error"
	except:
	  print "something error"
	else:
	  print "no error"

	2) try...except...finally: finnally will be done any way
	try:
	  s = raw_input("Enter something--->")
	except EOFError:
	  print "an EOF error"
	except:
	  print "something error"
	finally:
	  print "done"

	3) customize exception type
	class ShortInputException(Exception):
        def __init__(self, length, atleast):
          Exception.__init__(self)
          self.length = length
          self.atleast = atleast

	try:
        s = raw_input("Enter something again--->")
        if len(s) < 4:
          raise ShortInputException(len(s), 4)
	  except EOFError:
          print '\nWhy did you do a EOF on me?'
	  except ShortInputException, x:
          print '\nShortInputException error occurred, input length %d\
	  was exceting at least %d'%(x.length, x.atleast)
	  except:
          print '\nSomething error occurred'
	  finally:# It will be here whatever the except
          print 'Done'	



----------------------------------------------------------------------------------


PART2:
chapter4: 

import test 只是导入
exec(open('test.py').read()):是执行

>>> S = 'Spam'
>>> dir(S)  #get function
>>> help(S.replace) #get help

>>> type(a)
<type 'list'>

chapter5:

1. num
>>> x = 2; y = 3; z = 4;
>>> x < y > z
False

>>> import math
# Closest number below value
>>> math.floor(2.5)
2
>>> math.floor(-2.5)
-3
# Truncate fractional part (toward zero)
>>> math.trunc(2.5)
2
>>> math.trunc(-2.5)
-2

>>> oct(64), hex(64), bin(64)
('0100', '0x40', '0b1000000')

>>> 0.1 + 0.1 + 0.1 -0.3
5.551115123125783e-17
>>> Decimal('0.1') + Decimal('0.10') + Decimal('0.10') - Decimal('0.30')
Decimal('0.00')

>>> from fractions import Fraction
>>> x = Fraction(1, 3)
>>> y = Fraction(4, 6)
>>> x + y
Fraction(1, 1)
>>> x − y
Fraction(−1, 3)
>>> x * y
Fraction(2, 9)

>>> import math
>>> math.pi
3.141592653589793
>>> math.sqrt(9)
3.0

>>> import random
>>> random.random()
0.6415831836959961
>>> random.choice([2, 3, 4, 1])
2


chapter 6:
var, object:

>>> L1 = [2, 3, 4]
>>> L2 = L1
>>> L1[0] = 24
>>> L1
[24, 3, 4]
>>> L2
[24, 3, 4]
>>> L1 == L2
True
>>> L1 is L2
True

>>> L1 = [2, 3, 4]
>>> L2 = L1[:]
>>> L1[0] = 24
>>> L1 == L2
True
>>> L1 is L2
False
>>> L1
[24, 3, 4]
>>> L2
[2, 3, 4]


charpter 7:
string

>>> S = 'hello'
>>> S[::-1]  #reverse
'olleh'

>>> int("42"), str(42)
(42, '42')
>>> str(3.1415), float("1.5")
('3.1415', 1.5)

>>> ord('s')
115
>>> chr(115)
's'
>>> str('spam'), repr('spam')
('spam', "'spam'")

>>> int('1101', 2)
13
>>> bin(13)
'0b1101'

>>> line = 'Spam\n'
>>> line.rstrip()
'Spam'

>>> line ='[1, 2, 3]'
>>> eval(line)
[1, 2, 3]


charpter 8
1. list
>>> L = [1, 2, 3]
>>> L[1:2] = [4, 5] #replace+insert
>>> L
[1, 4, 5, 3]
>>> L[2] = 100  #replace
>>> L
[1, 4, 100, 3]
>>> L[0:2] = [5, 6] #replace
>>> L
[5, 6, 100, 3]
>>> L[1:1] = [6, 7] #insert
>>> L
[5, 6, 7, 6, 100, 3]
>>> L[1:2] = []  #delete
>>> L
[5, 7, 6, 100, 3]
>>> L[1:3] = [1]  #replace+delete
>>> L
[5, 1, 100, 3]

>>> M
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

>>> col2 = [row[1] for row in M]
>>> col2
[2, 5, 8] # Collect the items in column 2


>>> doubles = [c * 2 for c in 'spam']
>>> doubles
['ss', 'pp', 'aa', 'mm']

>>> D = list(range(4))
[0, 1, 2, 3]

>>> 1 in D
>>> TRUE

>>> sum(list(range(4)))

2. dict

>>> table = {'Holy Grail': '1975', 'Life of Brian': '1979', 'The Meaning of Life': '1983'}
>>> [key for (key, value) in table.items() if value == '1975']
['Holy Grail']

>>> dict(zip(['name', 'job', 'age'], ['Bob', 'dev', 40]))
{'age': 40, 'job': 'dev', 'name': 'Bob'}

>>> D = {'a': 1, 'b': 2, 'c': 3}
>>> 'f' in D
False

>>> list(D.keys())
['a', 'c', 'b']
>>> tuple(D.keys())
('a', 'c', 'b')


chapter9

1. set
>>> X = set('spam')
>>> Y = {'h', 'a', 'm'}
>>> M = set([1, 2, 3, 2, 1])

tuple, list, set可以互转


2. file
>>> f = open('data.txt', 'rw')# Make a new file in output mode ('w' is write)
>>> f.write('Hello\n') # Write strings of characters to it
>>> f.write('world\n') # Return number of items written in Python 3.X
>>> a = f.read()
>>> print a
hshsh
hshshs

>>> f.close()

>>> for line in open('myfile.txt'):
... print(line, end='')

/*object store*/
>>> D = {'a': 1, 'b': 2}
>>> F = open('datafile.pkl', 'wb')
>>> import pickle
>>> pickle.dump(D, F)
>>> F.close()
# Pickle any object to file
Then, to get the dictionary back later, we simply use pickle again to re-create it:
>>> F = open('datafile.pkl', 'rb')
>>> E = pickle.load(F)
>>> E
{'a': 1, 'b': 2}

/*struct store*/
>>> F = open('data.bin', 'wb')
>>> import struct
>>> data = struct.pack('>i4sh', 7, b'spam', 8)
>>> data
b'\x00\x00\x00\x07spam\x00\x08'
>>> F.write(data)
>>> F.close()
##########
>>> F = open('data.bin', 'rb')
>>> data = F.read()
>>> data
b'\x00\x00\x00\x07spam\x00\x08'
>>> values = struct.unpack('>i4sh', data)
>>> values
(7, b'spam', 8)


PART3:
chapter11:

>>> string = 'SPAM'
>>> a, b, c, d = string
>>> a, d
('S', 'M')

>>> nudge = 1
>>> wink = 2
>>> A, B = nudge, wink
>>> A, B
(1, 2)
>>> [C, D] = [nudge, wink]
>>> C, D
(1, 2)


>>> import sys
>>> temp = sys.stdout
>>> sys.stdout = open('log.txt', 'a')
>>> print('spam')
>>> print(1, 2, 3)
>>> sys.stdout.close()
>>> sys.stdout = temp
>>> print('back here')
back here
>>> print(open('log.txt').read())
spam
1 2 3


chapter14:

T1, T2, T3 = (1,2,3), (4,5,6), (7,8,9)
>>> T3
(7, 8, 9)
>>> list(zip(T1, T2, T3))
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]

[x + y for x in 'abc' for y in 'lmn']
['al', 'am', 'an', 'bl', 'bm', 'bn', 'cl', 'cm', 'cn']

>>> lines = [line.rstrip() for line in open('script2.py') if line[0] == 'p']

PART3
chapter16

#run time def function
if test:
def func():
...
else:
def func():
...
...
func()

#func object
othername = func
othername()

chapter17

#default new assignment in function is local

X = 99
def func(Y):
	Z = X + Y  # X is global


X = 88 
def func():
	X = 99 # X is local

X = 88
def func():
	global X
	X = 99 # X is global


def maker(N):
	def action(X):
		return X ** N
	return action
f = maker(2)
f(3)


def maker(N):
	action = lambda X: X ** N
	return action
h = maker(3)
h(4)


chapter18:

def f(a, *pargs, **kargs): print(a, pargs, kargs)
f(1, 2, 3, x=1, y=2)
1 (2, 3) {'y': 2, 'x': 1}


def func(a, b, c, d): print(a, b, c, d)
args = (1, 2)
args += (3, 4)
func(*args)
1 2 3 4


args = {'a': 1, 'b': 2, 'c': 3}
args['d'] = 4
func(**args)
1 2 3 4


func(*(1, 2), **{'d': 4, 'c': 3})
1 2 3 4
func(1, *(2, 3), **{'d': 4})
1 2 3 4
func(1, c=3, *(2,), **{'d': 4})
1 2 3 4
func(1, *(2, 3), d=4)
1 2 3 4
func(1, *(2,), c=3, **{'d':4})
1 2 3 4

Anonymous Functions:lamda
lambda argument1, argument2,... argumentN : expression using arguments

counters = [1, 2, 3, 4]
>>> map((lambda x: x + 3), counters)
[4, 5, 6, 7]

>>> map(pow, [1, 2, 3], [2, 3, 4])
[1, 8, 81]

>>> filter((lambda x: x > 0), range(−5, 5))
[1, 2, 3, 4]


>>> def myreduce(function, sequence):
tally = sequence[0]
for next in sequence[1:]:
tally = function(tally, next)
return tally
>>> myreduce((lambda x, y: x + y), [1, 2, 3, 4, 5])
15


chapter20
>>> def gensquares(N):
	for i in range(N):
		yield i ** 2  # produce a iter

>>> for i in gensquares(5):
	print(i, end=' : ')
0 : 1 : 4 : 9 : 16 :

>>> [x for x in range(3)]  #list comprehensive
[0, 1, 2]
>>> 
>>> list(x for x in range(3) #() is a iter and can be directly used in 'for x in ()'
[0, 1, 2]


PART5
charpter21
export PYTHONPATH=${PYTHONPATH}:/data/python

>>> import sys
>>> sys.path.append('/data/python/')
>>> import tmp

chapter22
# import  xxx
>>> import M,N
>>> M.func()
>>> N.func()

#from xxx import ss # assignment
>>> from M import func
>>> from N import func
>> func()   # only for N.func()

>>> from M import func as mfunc
>>> from N import func as nfunc
>>> mfunc(); nfunc()

PART6
chapter27

>>> class FirstClass:
	def setdata(self, value):
		self.data = value
	def display(self):
		print(self.data)
>>> x = FirstClass()

>>> class SecondClass(FirstClass):
	def display(self):
		print('Current value = "%s"' % self.data)
>>> z = SecondClass()
>>> z.setdata(42)
>>> z.display()
Current value = "42"


>>> class ThirdClass(SecondClass): # __sub__
	def __init__(self, value):
		self.data = value
	def __add__(self, other):
		print "_add_"
		if isinstance(other, ThirdClass):
			other = other.data
		return ThirdClass(self.data + other)
	def __radd__(self, other):
		print "_radd_"
		return ThirdClass(self.data + other)
	#__radd__ = __add__
	def __iadd__(self, other):
                print "_iadd_"
                self.data += other
		return self
	def __str__(self):
		return '[ThirdClass: %s]' % self.data
	def mul(self, other): # same rmul, imul
		self.data *= other
>>> a = ThirdClass('abc')
>>> a.display()
Current value = "abc"
>>> print(a)
[ThirdClass: abc]
>>> b = a + 'xyz'
>>> b.display()
Current value = "abcxyz"
>>> print(b)
[ThirdClass: abcxyz] 
>>> a.mul(3)
>>> print(a)
[ThirdClass: abcabcabc]

>>> x = ThirdClass(10)
>>> y = ThirdClass(12)
>>> x += 1
>>> print x+2
>>> print 3+x
>>> print x+y
_iadd_
_add_
[ThirdClass: 13]
_radd_
[ThirdClass: 14]
_add_
[ThirdClass: 23]

>>> class Baisc():
	def __init__(self, value):
		self.value = value;
>>> class Inheri(Baisc):
	def __init__(self, value):
		Basic.__init__(self, value)


>>> class A():
    def __str__(self):  #print to
         return '[ThirdClass: str]'
    def __repr__(self): # print to if no str, obj to and print list/tuple/xx of A 
         return '[ThirdClass: repr]'
>>> from tmp import A
>>> a = A()
>>> a
[ThirdClass: repr]
>>> print(a)
[ThirdClass: str]


chapter29:
>>> class SharedData:
	spam = 42  # class attr, all share
>>> x = SharedData()
>>> y = SharedData()
>>> x.spam, y.spam
(42, 42)
>>> SharedData.spam = 99
>>> x.spam, y.spam, SharedData.spam
(99, 99, 99)
>>> x.spam = 88 # allocate a member of instance
>>> x.spam, y.spam, SharedData.spam
(88, 99, 99)


>>> class NextClass:
	def printer(self, text):
		self.message = text
		print(self.message)
>>> x = NextClass()
>>> x.printer('instance call')
instance call
>>> x.message
'instance call'
>>> NextClass.printer(x, 'class call')
class call
>>> x.message
'class call'



"I am: docstr.__doc__"  # module __doc__
def func(args):
	"I am: docstr.func.__doc__"  # func __doc__
	pass
class spam:
	"I am: spam.__doc__ or docstr.spam.__doc__ or self.__doc__"  # class __doc__
	def method(self):
		"I am: spam.method.__doc__ or self.method.__doc__" # method __doc__
		print(self.__doc__)
		print(self.method.__doc__)


chapter 29
>>> class Indexer:
	data = [5, 6, 7, 8, 9]
	def __getitem__(self, index):
		print('getitem:', index)
		return self.data[index]
	def __setitem__(self, index, value):
		self.data[index] = value
	def __contains__(self, x):
		print('contains: ', x)
		return x in self.data
>>> X = Indexer()
>>> X[0]
getitem: 0
5
>>> 2 in X
contains: 2
bool

>>> class Squares:
	def __init__(self, start, stop):
		self.value = start - 1
		self.stop = stop
	def __iter__(self):
		return self
	def next(self):
		if self.value == self.stop:
			raise StopIteration
		self.value += 1
		return self.value ** 2
>>> for i in Squares(1, 5):
	print(i, end=' ')
1 4 9 16 25
>>> X = Squares(1, 5)
>>> I = iter(X)
>>> next(I)
1

>>> x = Squares(1,3)
>>> for i in x:
        for j in x:
                print(i,j)
(1, 4)
(1, 9)

>>> class Squares:  # implict next
	def __init__(self, start, stop):
		self.value = start - 1
		self.stop = stop
	def __iter__(self):
		for value in range(self.value + 1, self.stop + 1):
			yield value ** 2
>>> for i in Squares(1, 3):
	print(i, end=' ')
1 4 9 16 25
>>> X = Squares(1, 5)
>>> I = iter(X)
>>> next(I)
1
>>> for i in x:
        for j in x:
                print(i,j)
(1, 1)
(1, 4)
(1, 9)
(4, 1)
(4, 4)
(4, 9)
(9, 1)
(9, 4)
(9, 9)

>>> class Squares:
	def __init__(self, start, stop):
		self.start = start
		self.stop = stop
	def __iter__(self):
		return SquaresIter(self.start, self.stop)
>>> class SquaresIter:
	def __init__(self, start, stop):
		self.value = start - 1
		self.stop = stop
	def next(self):
		if self.value == self.stop:
			raise StopIteration
		self.value += 1
		return self.value ** 2

Is Same as last one


chapter 30

>>> class Callback:
	def __init__(self, color):
		self.color = color
	def __call__(self):
		print('turn', self.color)

cb1 = Callback('blue')
cb2 = Callback('green')


>>> class C:
        def __init__(self, value):
                self.data = value
        def __gt__(self, other):
                print "__ge__"
                if isinstance(other, C):
                        other = other.data
                return self.data > other
        def __lt__(self, other):
                print "__lt__"
                if isinstance(other, C):
                        other = other.data
                return self.data < other
>>> x = C(10)
>>> y = C(12)
>>> print x < 12
>>> print x > y
__lt__
True
__ge__
False

>>> class Truth:
        def __init__(self, value):
                self.data = value
        def __len__(self):
                print "__len__"
                return self.data;
>>> X = Truth(10)
>>> if X:
        print 'true'
>>> print bool(X)
__len__
true
__len__
True

chapter 31



chapter 33

expect:
expect name [as value]:
expect (name1, name2) [as value]:
else:
finally:


raise instance:
raise class:
raise:


Exception: all exception except exit


a = []
try:
    a[10] = 2
    #raise IndexError
except IndexError:
    print("hahah")
else:
    print("ok")
finally:
    print('fff')
-----------------
hahah
fff


class testexcept(Exception): pass

try:
    raise testexcept
except testexcept:
    print("testexcept")
----------------------------
testexcept



try:
    raise testexcept("hah")
except testexcept as x:
    print("testexcept args:", x.args)
--------------------------------
testexcept args: ('hah',)



with expression as var:
    with-block

the return object of expression control this via __enter__, __exit__ method 

try:
    with open("/root/nofile.txt") as myfile: # all in the try block can made except
    #but "with" don't need to close myfile in the "finally"
        raise testexcept
except FileNotFoundError:
    print("not found")
except testexcept:
    print("testexcept")


class tracetest:
    def __enter__(self):
        print("enter")
        return self
    def __exit__(self, exc_type, exc_value, exc_tb):
        print("exit")
    def test(self):
        print("hahahah")
with tracetest() as action:
    print("in block")
    action.test()

print("out block")
------------------------------------------------
enter
in block
exit
out block



class general(Exception): pass
class first(general): pass
class second(general): pass
def raise1(): raise general()
def raise2(): raise first()
def raise3(): raise second()
for func in (raise1, raise2, raise3):
    try:
        func()
    except general as x:
        print("catch %s" % x.__class__)
---------------------------------------------
catch <class '__main__.general'>
catch <class '__main__.first'>
catch <class '__main__.second'>



Exception
ArithmeticError
LookupError


------------------------------------------------
                      encode        decode
python2  bytes/str    <------------------>   unicode
str就是bytes
读取str直接转为bytes 存储

>>> s='文旭'
>>> s
'\xe6\x96\x87\xe6\x97\xad'
>>> print(s)
文旭
>>> m=u'\u6587\u65ed'
>>> m
u'\u6587\u65ed'
>>> type(m)
<type 'unicode'>
>>> print(m)
文旭
>>> m='\u6587\u65ed'
>>> m
'\\u6587\\u65ed'
>>> print(m)
\u6587\u65ed


                  encode        decode
python3  bytes    <------------------>   str/unicode
str就是unicode
读取str直接转成unicode
s='文旭'
>>> s
'文旭'
>>> type(s)
<class 'str'>
aa = a.encode('utf-8')
>>> type(aa)
<class 'bytes'>
>>> aa
b'\xe6\x96\x87\xe6\x97\xad'
>>> m=u'\u6587\u65ed'
>>> m
'文旭'
>>> type(m)
<class 'str'>
>>> m='\u6587\u65ed'
>>> m
'文旭'

