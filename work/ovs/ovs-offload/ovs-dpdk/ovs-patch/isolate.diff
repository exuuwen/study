diff --git a/lib/netdev-dpdk.c b/lib/netdev-dpdk.c
index 2640a42..f75351e 100644
--- a/lib/netdev-dpdk.c
+++ b/lib/netdev-dpdk.c
@@ -1086,6 +1086,71 @@ dpdk_eth_flow_ctrl_setup(struct netdev_dpdk *dev) OVS_REQUIRES(dev->mutex)
     }
 }
 
+#define MAX_PATTERN_NUM 5
+#define MAX_ACTION_NUM 3
+static struct rte_flow*
+dpdk_rte_flow_generator(int port_id, int n_queues)
+{
+    struct rte_flow_attr attr;
+    struct rte_flow_item pattern[MAX_PATTERN_NUM];
+    struct rte_flow_action action[MAX_ACTION_NUM];
+    struct rte_flow *flow = NULL;
+    struct rte_flow_error error;
+    unsigned int i;
+    unsigned int j;
+    int res;
+    uint16_t queue[RTE_MAX_QUEUES_PER_PORT];
+    struct rte_flow_action_rss action_rss;
+
+    struct rte_flow_item_gre gre_spec = {
+        .c_rsvd0_ver = RTE_BE16(0x2000),
+        .protocol = RTE_BE16(0x6558),
+    };
+    struct rte_flow_item_gre gre_mask = {
+        .c_rsvd0_ver = RTE_BE16(0xb000),
+        .protocol = RTE_BE16(0xffff),
+    };
+
+    memset(pattern, 0, sizeof(pattern));
+    memset(action, 0, sizeof(action));
+
+    memset(&attr, 0, sizeof(struct rte_flow_attr));
+    attr.ingress = 1;
+
+    for (i = 0, j = 0; i < n_queues; ++i)
+        queue[j++] = i;
+
+    action_rss = (struct rte_flow_action_rss){
+       .types = ETH_RSS_IP | ETH_RSS_UDP | ETH_RSS_TCP,
+       .key_len = 0,
+       .level = 2,
+       .queue_num = j,
+       .key = NULL,
+       .queue = queue,
+    };
+
+    action[0].type = RTE_FLOW_ACTION_TYPE_RSS;
+    action[0].conf = &action_rss;
+    action[1].type = RTE_FLOW_ACTION_TYPE_END;
+
+    pattern[0].type = RTE_FLOW_ITEM_TYPE_ETH;
+    pattern[1].type = RTE_FLOW_ITEM_TYPE_IPV4;
+    pattern[2].type = RTE_FLOW_ITEM_TYPE_GRE;
+    pattern[2].spec = &gre_spec;
+    pattern[2].mask = &gre_mask;
+    pattern[3].type = RTE_FLOW_ITEM_TYPE_END;
+
+    res = rte_flow_validate(port_id, &attr, pattern, action, &error);
+    if (res < 0)
+        rte_panic("Cannot flow validate %u (%d) %s\n", port_id, error.type, error.message ? error.message : "no direct message");
+
+    flow = rte_flow_create(port_id, &attr, pattern, action, &error);
+    if(!flow)
+        rte_panic("Cannot flow create %u (%d) %s\n", port_id, error.type, error.message ? error.message : "no direct message");
+
+    return flow;
+}
+
 static int
 dpdk_eth_dev_init(struct netdev_dpdk *dev)
     OVS_REQUIRES(dev->mutex)
@@ -1099,6 +1164,8 @@ dpdk_eth_dev_init(struct netdev_dpdk *dev)
     uint32_t rx_chksm_offload_capa = DEV_RX_OFFLOAD_UDP_CKSUM |
                                      DEV_RX_OFFLOAD_TCP_CKSUM |
                                      DEV_RX_OFFLOAD_IPV4_CKSUM;
+    struct rte_flow_error error;
+    int ret;
 
     rte_eth_dev_info_get(dev->port_id, &info);
 
@@ -1156,16 +1223,24 @@ dpdk_eth_dev_init(struct netdev_dpdk *dev)
         return -diag;
     }
 
+    ret = rte_flow_isolate(dev->port_id, 1, &error);
+    if(0 > ret) {
+        rte_panic("Cannot flow isolate %u (%d) %s\n", dev->port_id, error.type, error.message ? error.message : "no direct message");
+    }
+
     diag = rte_eth_dev_start(dev->port_id);
     if (diag) {
         VLOG_ERR("Interface %s start error: %s", dev->up.name,
                  rte_strerror(-diag));
         return -diag;
     }
+
+    dpdk_rte_flow_generator(dev->port_id, n_rxq);
+
     dev->started = true;
 
-    rte_eth_promiscuous_enable(dev->port_id);
-    rte_eth_allmulticast_enable(dev->port_id);
+    //rte_eth_promiscuous_enable(dev->port_id);
+    //rte_eth_allmulticast_enable(dev->port_id);
 
     memset(&eth_addr, 0x0, sizeof(eth_addr));
     rte_eth_macaddr_get(dev->port_id, &eth_addr);
