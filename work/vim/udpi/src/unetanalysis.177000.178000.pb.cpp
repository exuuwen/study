// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "unetanalysis.177000.178000.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ucloud {
namespace unetanalysis {

namespace {

const ::google::protobuf::Descriptor* StatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatsDataEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatsDataEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordStatsExRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordStatsExRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNetItemStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetItemStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNetRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNetRankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetRankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ip_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ip_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIpsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIpsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIpsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIpsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushIpsFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushIpsFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUserLvlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUserLvlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUserLvlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUserLvlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserLvlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserLvlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserLvlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserLvlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UuidExInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UuidExInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNetItemStatsForUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNetItemStatsForUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemStatsForUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemStatsForUserResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_unetanalysis_2e177000_2e178000_2eproto() {
  protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "unetanalysis.177000.178000.proto");
  GOOGLE_CHECK(file != NULL);
  StatsData_descriptor_ = file->message_type(0);
  static const int StatsData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, is_regional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, isp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, no_regional_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, time_),
  };
  StatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatsData_descriptor_,
      StatsData::default_instance_,
      StatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatsData));
  RecordStatsRequest_descriptor_ = file->message_type(1);
  static const int RecordStatsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsRequest, stats_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsRequest, dpdk_id_),
  };
  RecordStatsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordStatsRequest_descriptor_,
      RecordStatsRequest::default_instance_,
      RecordStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordStatsRequest));
  StatsDataEx_descriptor_ = file->message_type(2);
  static const int StatsDataEx_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, is_regional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, isp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, no_regional_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, aggregator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, period_),
  };
  StatsDataEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatsDataEx_descriptor_,
      StatsDataEx::default_instance_,
      StatsDataEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsDataEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatsDataEx));
  RecordStatsExRequest_descriptor_ = file->message_type(3);
  static const int RecordStatsExRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsExRequest, stats_data_ex_list_),
  };
  RecordStatsExRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordStatsExRequest_descriptor_,
      RecordStatsExRequest::default_instance_,
      RecordStatsExRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsExRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordStatsExRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordStatsExRequest));
  GetNetItemStatsRequest_descriptor_ = file->message_type(4);
  static const int GetNetItemStatsRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, isp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, user_grain_),
  };
  GetNetItemStatsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetItemStatsRequest_descriptor_,
      GetNetItemStatsRequest::default_instance_,
      GetNetItemStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetItemStatsRequest));
  StatsInfo_descriptor_ = file->message_type(5);
  static const int StatsInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, value_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, isp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, no_regional_key_),
  };
  StatsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatsInfo_descriptor_,
      StatsInfo::default_instance_,
      StatsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatsInfo));
  MonitorData_descriptor_ = file->message_type(6);
  static const int MonitorData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, is_regional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, grain_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, stats_info_),
  };
  MonitorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorData_descriptor_,
      MonitorData::default_instance_,
      MonitorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorData));
  GetItemStatsResponse_descriptor_ = file->message_type(7);
  static const int GetItemStatsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsResponse, monitor_data_),
  };
  GetItemStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemStatsResponse_descriptor_,
      GetItemStatsResponse::default_instance_,
      GetItemStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemStatsResponse));
  GetNetRankRequest_descriptor_ = file->message_type(8);
  static const int GetNetRankRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, time_),
  };
  GetNetRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetRankRequest_descriptor_,
      GetNetRankRequest::default_instance_,
      GetNetRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetRankRequest));
  RankData_descriptor_ = file->message_type(9);
  static const int RankData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, value_),
  };
  RankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankData_descriptor_,
      RankData::default_instance_,
      RankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankData));
  GetNetRankResponse_descriptor_ = file->message_type(10);
  static const int GetNetRankResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankResponse, rank_data_),
  };
  GetNetRankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetRankResponse_descriptor_,
      GetNetRankResponse::default_instance_,
      GetNetRankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetRankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetRankResponse));
  Ip_Info_descriptor_ = file->message_type(11);
  static const int Ip_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip_Info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip_Info, account_id_),
  };
  Ip_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ip_Info_descriptor_,
      Ip_Info::default_instance_,
      Ip_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ip_Info));
  GetIpsRequest_descriptor_ = file->message_type(12);
  static const int GetIpsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsRequest, regin_),
  };
  GetIpsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIpsRequest_descriptor_,
      GetIpsRequest::default_instance_,
      GetIpsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIpsRequest));
  GetIpsResponse_descriptor_ = file->message_type(13);
  static const int GetIpsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsResponse, regin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsResponse, ips_),
  };
  GetIpsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIpsResponse_descriptor_,
      GetIpsResponse::default_instance_,
      GetIpsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIpsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIpsResponse));
  PushIpsFileRequest_descriptor_ = file->message_type(14);
  static const int PushIpsFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushIpsFileRequest, name_),
  };
  PushIpsFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushIpsFileRequest_descriptor_,
      PushIpsFileRequest::default_instance_,
      PushIpsFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushIpsFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushIpsFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushIpsFileRequest));
  SetUserLvlRequest_descriptor_ = file->message_type(15);
  static const int SetUserLvlRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlRequest, lvl_),
  };
  SetUserLvlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUserLvlRequest_descriptor_,
      SetUserLvlRequest::default_instance_,
      SetUserLvlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUserLvlRequest));
  SetUserLvlResponse_descriptor_ = file->message_type(16);
  static const int SetUserLvlResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlResponse, lvl_),
  };
  SetUserLvlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUserLvlResponse_descriptor_,
      SetUserLvlResponse::default_instance_,
      SetUserLvlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserLvlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUserLvlResponse));
  GetUserLvlRequest_descriptor_ = file->message_type(17);
  static const int GetUserLvlRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlRequest, user_id_),
  };
  GetUserLvlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserLvlRequest_descriptor_,
      GetUserLvlRequest::default_instance_,
      GetUserLvlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserLvlRequest));
  GetUserLvlResponse_descriptor_ = file->message_type(18);
  static const int GetUserLvlResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, min_grain_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, lvl_effective_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, start_analysis_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, store_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, data_dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, item_ids_),
  };
  GetUserLvlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserLvlResponse_descriptor_,
      GetUserLvlResponse::default_instance_,
      GetUserLvlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserLvlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserLvlResponse));
  UuidExInfo_descriptor_ = file->message_type(19);
  static const int UuidExInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UuidExInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UuidExInfo, created_time_),
  };
  UuidExInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UuidExInfo_descriptor_,
      UuidExInfo::default_instance_,
      UuidExInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UuidExInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UuidExInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UuidExInfo));
  GetNetItemStatsForUserRequest_descriptor_ = file->message_type(20);
  static const int GetNetItemStatsForUserRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, isp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, uuid_ex_info_),
  };
  GetNetItemStatsForUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNetItemStatsForUserRequest_descriptor_,
      GetNetItemStatsForUserRequest::default_instance_,
      GetNetItemStatsForUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNetItemStatsForUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNetItemStatsForUserRequest));
  GetItemStatsForUserResponse_descriptor_ = file->message_type(21);
  static const int GetItemStatsForUserResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsForUserResponse, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsForUserResponse, monitor_data_),
  };
  GetItemStatsForUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemStatsForUserResponse_descriptor_,
      GetItemStatsForUserResponse::default_instance_,
      GetItemStatsForUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsForUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemStatsForUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemStatsForUserResponse));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_unetanalysis_2e177000_2e178000_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatsData_descriptor_, &StatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordStatsRequest_descriptor_, &RecordStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatsDataEx_descriptor_, &StatsDataEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordStatsExRequest_descriptor_, &RecordStatsExRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetItemStatsRequest_descriptor_, &GetNetItemStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatsInfo_descriptor_, &StatsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorData_descriptor_, &MonitorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemStatsResponse_descriptor_, &GetItemStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetRankRequest_descriptor_, &GetNetRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankData_descriptor_, &RankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetRankResponse_descriptor_, &GetNetRankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ip_Info_descriptor_, &Ip_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIpsRequest_descriptor_, &GetIpsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIpsResponse_descriptor_, &GetIpsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushIpsFileRequest_descriptor_, &PushIpsFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUserLvlRequest_descriptor_, &SetUserLvlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUserLvlResponse_descriptor_, &SetUserLvlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserLvlRequest_descriptor_, &GetUserLvlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserLvlResponse_descriptor_, &GetUserLvlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UuidExInfo_descriptor_, &UuidExInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNetItemStatsForUserRequest_descriptor_, &GetNetItemStatsForUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemStatsForUserResponse_descriptor_, &GetItemStatsForUserResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_unetanalysis_2e177000_2e178000_2eproto() {
  delete StatsData::default_instance_;
  delete StatsData_reflection_;
  delete RecordStatsRequest::default_instance_;
  delete RecordStatsRequest_reflection_;
  delete StatsDataEx::default_instance_;
  delete StatsDataEx_reflection_;
  delete RecordStatsExRequest::default_instance_;
  delete RecordStatsExRequest_reflection_;
  delete GetNetItemStatsRequest::default_instance_;
  delete GetNetItemStatsRequest_reflection_;
  delete StatsInfo::default_instance_;
  delete StatsInfo_reflection_;
  delete MonitorData::default_instance_;
  delete MonitorData_reflection_;
  delete GetItemStatsResponse::default_instance_;
  delete GetItemStatsResponse_reflection_;
  delete GetNetRankRequest::default_instance_;
  delete GetNetRankRequest_reflection_;
  delete RankData::default_instance_;
  delete RankData_reflection_;
  delete GetNetRankResponse::default_instance_;
  delete GetNetRankResponse_reflection_;
  delete Ip_Info::default_instance_;
  delete Ip_Info_reflection_;
  delete GetIpsRequest::default_instance_;
  delete GetIpsRequest_reflection_;
  delete GetIpsResponse::default_instance_;
  delete GetIpsResponse_reflection_;
  delete PushIpsFileRequest::default_instance_;
  delete PushIpsFileRequest_reflection_;
  delete SetUserLvlRequest::default_instance_;
  delete SetUserLvlRequest_reflection_;
  delete SetUserLvlResponse::default_instance_;
  delete SetUserLvlResponse_reflection_;
  delete GetUserLvlRequest::default_instance_;
  delete GetUserLvlRequest_reflection_;
  delete GetUserLvlResponse::default_instance_;
  delete GetUserLvlResponse_reflection_;
  delete UuidExInfo::default_instance_;
  delete UuidExInfo_reflection_;
  delete GetNetItemStatsForUserRequest::default_instance_;
  delete GetNetItemStatsForUserRequest_reflection_;
  delete GetItemStatsForUserResponse::default_instance_;
  delete GetItemStatsForUserResponse_reflection_;
}

void protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ucloud::protobuf_AddDesc_ucloud_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n unetanalysis.177000.178000.proto\022\023uclo"
    "ud.unetanalysis\032\014ucloud.proto\"\230\001\n\tStatsD"
    "ata\022\014\n\004uuid\030\n \002(\t\022\017\n\007item_id\030\024 \002(\r\022\023\n\013is"
    "_regional\030F \002(\r\022\021\n\tregion_id\030\036 \002(\r\022\016\n\006is"
    "p_id\030( \002(\r\022\027\n\017no_regional_key\030P \002(\t\022\r\n\005v"
    "alue\0302 \002(\004\022\014\n\004time\030< \002(\r\"^\n\022RecordStatsR"
    "equest\0227\n\017stats_data_list\030\n \003(\0132\036.ucloud"
    ".unetanalysis.StatsData\022\017\n\007dpdk_id\030\024 \001(\r"
    "\"\276\001\n\013StatsDataEx\022\014\n\004uuid\030\n \002(\t\022\017\n\007item_i"
    "d\030\024 \002(\r\022\023\n\013is_regional\030Z \002(\r\022\021\n\tregion_i"
    "d\030\036 \002(\r\022\016\n\006isp_id\030( \002(\r\022\027\n\017no_regional_k"
    "ey\030d \002(\t\022\r\n\005value\0302 \002(\004\022\014\n\004time\030< \002(\r\022\022\n"
    "\naggregator\030F \001(\r\022\016\n\006period\030P \001(\r\"T\n\024Rec"
    "ordStatsExRequest\022<\n\022stats_data_ex_list\030"
    "\n \003(\0132 .ucloud.unetanalysis.StatsDataEx\""
    "\251\001\n\026GetNetItemStatsRequest\022\014\n\004uuid\030\n \003(\t"
    "\022\023\n\013object_name\030\024 \001(\t\022\017\n\007item_id\030\026 \001(\r\022\021"
    "\n\tregion_id\030\027 \001(\r\022\016\n\006isp_id\030\030 \001(\r\022\022\n\nsta"
    "rt_time\030\036 \001(\r\022\020\n\010end_time\030( \001(\r\022\022\n\nuser_"
    "grain\0302 \001(\r\"j\n\tStatsInfo\022\r\n\005value\030\n \002(\003\022"
    "\022\n\nvalue_time\030\024 \002(\r\022\021\n\tregion_id\030\037 \002(\r\022\016"
    "\n\006isp_id\030  \002(\r\022\027\n\017no_regional_key\030! \001(\t\""
    "\211\001\n\013MonitorData\022\014\n\004uuid\030\n \001(\t\022\017\n\007item_id"
    "\030\036 \001(\r\022\023\n\013is_regional\030\024 \001(\r\022\022\n\ngrain_siz"
    "e\030< \001(\r\0222\n\nstats_info\030( \003(\0132\036.ucloud.une"
    "tanalysis.StatsInfo\"p\n\024GetItemStatsRespo"
    "nse\022 \n\002rc\030\n \002(\0132\024.ucloud.ResponseCode\0226\n"
    "\014monitor_data\030\024 \003(\0132 .ucloud.unetanalysi"
    "s.MonitorData\"a\n\021GetNetRankRequest\022\017\n\007it"
    "em_id\030\n \002(\r\022\r\n\005start\030\024 \001(\r\022\013\n\003end\030\036 \001(\r\022"
    "\021\n\trank_type\030( \001(\r\022\014\n\004time\0302 \001(\r\"\'\n\010Rank"
    "Data\022\014\n\004uuid\030\n \001(\t\022\r\n\005value\030\024 \001(\004\"y\n\022Get"
    "NetRankResponse\022 \n\002rc\030\n \002(\0132\024.ucloud.Res"
    "ponseCode\022\017\n\007item_id\030\024 \001(\r\0220\n\trank_data\030"
    "\036 \003(\0132\035.ucloud.unetanalysis.RankData\")\n\007"
    "Ip_Info\022\n\n\002ip\030\n \001(\t\022\022\n\naccount_id\030\024 \001(\r\""
    "\036\n\rGetIpsRequest\022\r\n\005regin\030\n \002(\t\"J\n\016GetIp"
    "sResponse\022\r\n\005regin\030\n \002(\t\022)\n\003ips\030\024 \003(\0132\034."
    "ucloud.unetanalysis.Ip_Info\"\"\n\022PushIpsFi"
    "leRequest\022\014\n\004name\030\n \002(\t\"1\n\021SetUserLvlReq"
    "uest\022\017\n\007user_id\030\n \002(\t\022\013\n\003lvl\030\024 \001(\r\"T\n\022Se"
    "tUserLvlResponse\022 \n\002rc\030\n \002(\0132\024.ucloud.Re"
    "sponseCode\022\017\n\007user_id\030\024 \001(\t\022\013\n\003lvl\030\036 \001(\r"
    "\"$\n\021GetUserLvlRequest\022\017\n\007user_id\030\n \002(\t\"\343"
    "\001\n\022GetUserLvlResponse\022 \n\002rc\030\n \002(\0132\024.uclo"
    "ud.ResponseCode\022\017\n\007user_id\030\024 \001(\t\022\013\n\003lvl\030"
    "\036 \001(\r\022\026\n\016min_grain_size\030( \001(\r\022\032\n\022lvl_eff"
    "ective_time\0302 \001(\r\022\033\n\023start_analysis_time"
    "\030< \001(\r\022\022\n\nstore_time\030F \001(\r\022\026\n\016data_dimen"
    "sion\030P \001(\r\022\020\n\010item_ids\030Z \003(\r\"0\n\nUuidExIn"
    "fo\022\014\n\004uuid\030\n \001(\t\022\024\n\014created_time\030\024 \001(\r\"\344"
    "\001\n\035GetNetItemStatsForUserRequest\022\014\n\004uuid"
    "\030\n \003(\t\022\023\n\013object_name\030\024 \001(\t\022\017\n\007item_id\030\026"
    " \001(\r\022\021\n\tregion_id\030\027 \001(\r\022\016\n\006isp_id\030\030 \001(\r\022"
    "\022\n\nstart_time\030\036 \001(\r\022\020\n\010end_time\030( \001(\r\022\017\n"
    "\007user_id\0302 \001(\t\0225\n\014uuid_ex_info\030< \003(\0132\037.u"
    "cloud.unetanalysis.UuidExInfo\"w\n\033GetItem"
    "StatsForUserResponse\022 \n\002rc\030\n \002(\0132\024.uclou"
    "d.ResponseCode\0226\n\014monitor_data\030\024 \003(\0132 .u"
    "cloud.unetanalysis.MonitorData*\370\003\n\013Messa"
    "geType\022\022\n\014BEGINNING_ID\020\350\346\n\022\032\n\024RECORD_STA"
    "TS_REQUEST\020\351\346\n\022\035\n\027RECORD_STATS_EX_REQUES"
    "T\020\352\346\n\022 \n\032GET_NET_ITEM_STATS_REQUEST\020\353\346\n\022"
    "\035\n\027GET_ITEM_STATS_RESPONSE\020\354\346\n\022\032\n\024GET_NE"
    "T_RANK_REQUEST\020\355\346\n\022\033\n\025GET_NET_RANK_RESPO"
    "NSE\020\356\346\n\022\025\n\017GET_IPS_REQUEST\020\357\346\n\022\026\n\020GET_IP"
    "S_RESPONSE\020\360\346\n\022\033\n\025PUSH_IPS_FILE_REQUEST\020"
    "\361\346\n\022\032\n\024SET_USER_LVL_REQUEST\020\363\346\n\022\033\n\025SET_U"
    "SER_LVL_RESPONSE\020\364\346\n\022\032\n\024GET_USER_LVL_REQ"
    "UEST\020\365\346\n\022\033\n\025GET_USER_LVL_RESPONSE\020\366\346\n\022)\n"
    "#GET_NET_ITEM_STATS_FOR_USER_REQUEST\020\367\346\n"
    "\022&\n GET_ITEM_STATS_FOR_USER_RESPONSE\020\370\346\n"
    "\022\017\n\tENDING_ID\020\320\356\n:U\n\024record_stats_reques"
    "t\022\014.ucloud.Body\030\351\346\n \001(\0132\'.ucloud.unetana"
    "lysis.RecordStatsRequest:Z\n\027record_stats"
    "_ex_request\022\014.ucloud.Body\030\352\346\n \001(\0132).uclo"
    "ud.unetanalysis.RecordStatsExRequest:_\n\032"
    "get_net_item_stats_request\022\014.ucloud.Body"
    "\030\353\346\n \001(\0132+.ucloud.unetanalysis.GetNetIte"
    "mStatsRequest:Z\n\027get_item_stats_response"
    "\022\014.ucloud.Body\030\354\346\n \001(\0132).ucloud.unetanal"
    "ysis.GetItemStatsResponse:T\n\024get_net_ran"
    "k_request\022\014.ucloud.Body\030\355\346\n \001(\0132&.ucloud"
    ".unetanalysis.GetNetRankRequest:V\n\025get_n"
    "et_rank_response\022\014.ucloud.Body\030\356\346\n \001(\0132\'"
    ".ucloud.unetanalysis.GetNetRankResponse:"
    "K\n\017get_ips_request\022\014.ucloud.Body\030\357\346\n \001(\013"
    "2\".ucloud.unetanalysis.GetIpsRequest:M\n\020"
    "get_ips_response\022\014.ucloud.Body\030\360\346\n \001(\0132#"
    ".ucloud.unetanalysis.GetIpsResponse:V\n\025p"
    "ush_ips_file_request\022\014.ucloud.Body\030\361\346\n \001"
    "(\0132\'.ucloud.unetanalysis.PushIpsFileRequ"
    "est:T\n\024set_user_lvl_request\022\014.ucloud.Bod"
    "y\030\363\346\n \001(\0132&.ucloud.unetanalysis.SetUserL"
    "vlRequest:V\n\025set_user_lvl_response\022\014.ucl"
    "oud.Body\030\364\346\n \001(\0132\'.ucloud.unetanalysis.S"
    "etUserLvlResponse:T\n\024get_user_lvl_reques"
    "t\022\014.ucloud.Body\030\365\346\n \001(\0132&.ucloud.unetana"
    "lysis.GetUserLvlRequest:V\n\025get_user_lvl_"
    "response\022\014.ucloud.Body\030\366\346\n \001(\0132\'.ucloud."
    "unetanalysis.GetUserLvlResponse:o\n#get_n"
    "et_item_stats_for_user_request\022\014.ucloud."
    "Body\030\367\346\n \001(\01322.ucloud.unetanalysis.GetNe"
    "tItemStatsForUserRequest:j\n get_item_sta"
    "ts_for_user_response\022\014.ucloud.Body\030\370\346\n \001"
    "(\01320.ucloud.unetanalysis.GetItemStatsFor"
    "UserResponse", 4252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "unetanalysis.177000.178000.proto", &protobuf_RegisterTypes);
  StatsData::default_instance_ = new StatsData();
  RecordStatsRequest::default_instance_ = new RecordStatsRequest();
  StatsDataEx::default_instance_ = new StatsDataEx();
  RecordStatsExRequest::default_instance_ = new RecordStatsExRequest();
  GetNetItemStatsRequest::default_instance_ = new GetNetItemStatsRequest();
  StatsInfo::default_instance_ = new StatsInfo();
  MonitorData::default_instance_ = new MonitorData();
  GetItemStatsResponse::default_instance_ = new GetItemStatsResponse();
  GetNetRankRequest::default_instance_ = new GetNetRankRequest();
  RankData::default_instance_ = new RankData();
  GetNetRankResponse::default_instance_ = new GetNetRankResponse();
  Ip_Info::default_instance_ = new Ip_Info();
  GetIpsRequest::default_instance_ = new GetIpsRequest();
  GetIpsResponse::default_instance_ = new GetIpsResponse();
  PushIpsFileRequest::default_instance_ = new PushIpsFileRequest();
  SetUserLvlRequest::default_instance_ = new SetUserLvlRequest();
  SetUserLvlResponse::default_instance_ = new SetUserLvlResponse();
  GetUserLvlRequest::default_instance_ = new GetUserLvlRequest();
  GetUserLvlResponse::default_instance_ = new GetUserLvlResponse();
  UuidExInfo::default_instance_ = new UuidExInfo();
  GetNetItemStatsForUserRequest::default_instance_ = new GetNetItemStatsForUserRequest();
  GetItemStatsForUserResponse::default_instance_ = new GetItemStatsForUserResponse();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177001, 11, false, false,
    &::ucloud::unetanalysis::RecordStatsRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177002, 11, false, false,
    &::ucloud::unetanalysis::RecordStatsExRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177003, 11, false, false,
    &::ucloud::unetanalysis::GetNetItemStatsRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177004, 11, false, false,
    &::ucloud::unetanalysis::GetItemStatsResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177005, 11, false, false,
    &::ucloud::unetanalysis::GetNetRankRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177006, 11, false, false,
    &::ucloud::unetanalysis::GetNetRankResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177007, 11, false, false,
    &::ucloud::unetanalysis::GetIpsRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177008, 11, false, false,
    &::ucloud::unetanalysis::GetIpsResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177009, 11, false, false,
    &::ucloud::unetanalysis::PushIpsFileRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177011, 11, false, false,
    &::ucloud::unetanalysis::SetUserLvlRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177012, 11, false, false,
    &::ucloud::unetanalysis::SetUserLvlResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177013, 11, false, false,
    &::ucloud::unetanalysis::GetUserLvlRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177014, 11, false, false,
    &::ucloud::unetanalysis::GetUserLvlResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177015, 11, false, false,
    &::ucloud::unetanalysis::GetNetItemStatsForUserRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ucloud::Body::default_instance(),
    177016, 11, false, false,
    &::ucloud::unetanalysis::GetItemStatsForUserResponse::default_instance());
  StatsData::default_instance_->InitAsDefaultInstance();
  RecordStatsRequest::default_instance_->InitAsDefaultInstance();
  StatsDataEx::default_instance_->InitAsDefaultInstance();
  RecordStatsExRequest::default_instance_->InitAsDefaultInstance();
  GetNetItemStatsRequest::default_instance_->InitAsDefaultInstance();
  StatsInfo::default_instance_->InitAsDefaultInstance();
  MonitorData::default_instance_->InitAsDefaultInstance();
  GetItemStatsResponse::default_instance_->InitAsDefaultInstance();
  GetNetRankRequest::default_instance_->InitAsDefaultInstance();
  RankData::default_instance_->InitAsDefaultInstance();
  GetNetRankResponse::default_instance_->InitAsDefaultInstance();
  Ip_Info::default_instance_->InitAsDefaultInstance();
  GetIpsRequest::default_instance_->InitAsDefaultInstance();
  GetIpsResponse::default_instance_->InitAsDefaultInstance();
  PushIpsFileRequest::default_instance_->InitAsDefaultInstance();
  SetUserLvlRequest::default_instance_->InitAsDefaultInstance();
  SetUserLvlResponse::default_instance_->InitAsDefaultInstance();
  GetUserLvlRequest::default_instance_->InitAsDefaultInstance();
  GetUserLvlResponse::default_instance_->InitAsDefaultInstance();
  UuidExInfo::default_instance_->InitAsDefaultInstance();
  GetNetItemStatsForUserRequest::default_instance_->InitAsDefaultInstance();
  GetItemStatsForUserResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_unetanalysis_2e177000_2e178000_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_unetanalysis_2e177000_2e178000_2eproto {
  StaticDescriptorInitializer_unetanalysis_2e177000_2e178000_2eproto() {
    protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();
  }
} static_descriptor_initializer_unetanalysis_2e177000_2e178000_2eproto_;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 177000:
    case 177001:
    case 177002:
    case 177003:
    case 177004:
    case 177005:
    case 177006:
    case 177007:
    case 177008:
    case 177009:
    case 177011:
    case 177012:
    case 177013:
    case 177014:
    case 177015:
    case 177016:
    case 178000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StatsData::kUuidFieldNumber;
const int StatsData::kItemIdFieldNumber;
const int StatsData::kIsRegionalFieldNumber;
const int StatsData::kRegionIdFieldNumber;
const int StatsData::kIspIdFieldNumber;
const int StatsData::kNoRegionalKeyFieldNumber;
const int StatsData::kValueFieldNumber;
const int StatsData::kTimeFieldNumber;
#endif  // !_MSC_VER

StatsData::StatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatsData::InitAsDefaultInstance() {
}

StatsData::StatsData(const StatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatsData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  is_regional_ = 0u;
  region_id_ = 0u;
  isp_id_ = 0u;
  no_regional_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsData::~StatsData() {
  SharedDtor();
}

void StatsData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
    delete no_regional_key_;
  }
  if (this != default_instance_) {
  }
}

void StatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatsData_descriptor_;
}

const StatsData& StatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

StatsData* StatsData::default_instance_ = NULL;

StatsData* StatsData::New() const {
  return new StatsData;
}

void StatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    item_id_ = 0u;
    is_regional_ = 0u;
    region_id_ = 0u;
    isp_id_ = 0u;
    if (has_no_regional_key()) {
      if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
        no_regional_key_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_region_id;
        break;
      }
      
      // required uint32 region_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_isp_id;
        break;
      }
      
      // required uint32 isp_id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isp_id_)));
          set_has_isp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_value;
        break;
      }
      
      // required uint64 value = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_time;
        break;
      }
      
      // required uint32 time = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_is_regional;
        break;
      }
      
      // required uint32 is_regional = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_regional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_regional_)));
          set_has_is_regional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_no_regional_key;
        break;
      }
      
      // required string no_regional_key = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_no_regional_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_no_regional_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->no_regional_key().data(), this->no_regional_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(), output);
  }
  
  // required uint32 item_id = 20;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item_id(), output);
  }
  
  // required uint32 region_id = 30;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->region_id(), output);
  }
  
  // required uint32 isp_id = 40;
  if (has_isp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->isp_id(), output);
  }
  
  // required uint64 value = 50;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->value(), output);
  }
  
  // required uint32 time = 60;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->time(), output);
  }
  
  // required uint32 is_regional = 70;
  if (has_is_regional()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->is_regional(), output);
  }
  
  // required string no_regional_key = 80;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->no_regional_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uuid(), target);
  }
  
  // required uint32 item_id = 20;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item_id(), target);
  }
  
  // required uint32 region_id = 30;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->region_id(), target);
  }
  
  // required uint32 isp_id = 40;
  if (has_isp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->isp_id(), target);
  }
  
  // required uint64 value = 50;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->value(), target);
  }
  
  // required uint32 time = 60;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->time(), target);
  }
  
  // required uint32 is_regional = 70;
  if (has_is_regional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->is_regional(), target);
  }
  
  // required string no_regional_key = 80;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->no_regional_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 10;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required uint32 item_id = 20;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 is_regional = 70;
    if (has_is_regional()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_regional());
    }
    
    // required uint32 region_id = 30;
    if (has_region_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }
    
    // required uint32 isp_id = 40;
    if (has_isp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isp_id());
    }
    
    // required string no_regional_key = 80;
    if (has_no_regional_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->no_regional_key());
    }
    
    // required uint64 value = 50;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // required uint32 time = 60;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatsData::MergeFrom(const StatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_regional()) {
      set_is_regional(from.is_regional());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_isp_id()) {
      set_isp_id(from.isp_id());
    }
    if (from.has_no_regional_key()) {
      set_no_regional_key(from.no_regional_key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsData::CopyFrom(const StatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void StatsData::Swap(StatsData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(item_id_, other->item_id_);
    std::swap(is_regional_, other->is_regional_);
    std::swap(region_id_, other->region_id_);
    std::swap(isp_id_, other->isp_id_);
    std::swap(no_regional_key_, other->no_regional_key_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatsData_descriptor_;
  metadata.reflection = StatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordStatsRequest::kStatsDataListFieldNumber;
const int RecordStatsRequest::kDpdkIdFieldNumber;
#endif  // !_MSC_VER

RecordStatsRequest::RecordStatsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordStatsRequest::InitAsDefaultInstance() {
}

RecordStatsRequest::RecordStatsRequest(const RecordStatsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  dpdk_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordStatsRequest::~RecordStatsRequest() {
  SharedDtor();
}

void RecordStatsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordStatsRequest_descriptor_;
}

const RecordStatsRequest& RecordStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

RecordStatsRequest* RecordStatsRequest::default_instance_ = NULL;

RecordStatsRequest* RecordStatsRequest::New() const {
  return new RecordStatsRequest;
}

void RecordStatsRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dpdk_id_ = 0u;
  }
  stats_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ucloud.unetanalysis.StatsData stats_data_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stats_data_list;
        if (input->ExpectTag(160)) goto parse_dpdk_id;
        break;
      }
      
      // optional uint32 dpdk_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dpdk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dpdk_id_)));
          set_has_dpdk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ucloud.unetanalysis.StatsData stats_data_list = 10;
  for (int i = 0; i < this->stats_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stats_data_list(i), output);
  }
  
  // optional uint32 dpdk_id = 20;
  if (has_dpdk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->dpdk_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ucloud.unetanalysis.StatsData stats_data_list = 10;
  for (int i = 0; i < this->stats_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stats_data_list(i), target);
  }
  
  // optional uint32 dpdk_id = 20;
  if (has_dpdk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->dpdk_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordStatsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 dpdk_id = 20;
    if (has_dpdk_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dpdk_id());
    }
    
  }
  // repeated .ucloud.unetanalysis.StatsData stats_data_list = 10;
  total_size += 1 * this->stats_data_list_size();
  for (int i = 0; i < this->stats_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_data_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordStatsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordStatsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordStatsRequest::MergeFrom(const RecordStatsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_data_list_.MergeFrom(from.stats_data_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dpdk_id()) {
      set_dpdk_id(from.dpdk_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordStatsRequest::CopyFrom(const RecordStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordStatsRequest::IsInitialized() const {
  
  for (int i = 0; i < stats_data_list_size(); i++) {
    if (!this->stats_data_list(i).IsInitialized()) return false;
  }
  return true;
}

void RecordStatsRequest::Swap(RecordStatsRequest* other) {
  if (other != this) {
    stats_data_list_.Swap(&other->stats_data_list_);
    std::swap(dpdk_id_, other->dpdk_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordStatsRequest_descriptor_;
  metadata.reflection = RecordStatsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatsDataEx::kUuidFieldNumber;
const int StatsDataEx::kItemIdFieldNumber;
const int StatsDataEx::kIsRegionalFieldNumber;
const int StatsDataEx::kRegionIdFieldNumber;
const int StatsDataEx::kIspIdFieldNumber;
const int StatsDataEx::kNoRegionalKeyFieldNumber;
const int StatsDataEx::kValueFieldNumber;
const int StatsDataEx::kTimeFieldNumber;
const int StatsDataEx::kAggregatorFieldNumber;
const int StatsDataEx::kPeriodFieldNumber;
#endif  // !_MSC_VER

StatsDataEx::StatsDataEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatsDataEx::InitAsDefaultInstance() {
}

StatsDataEx::StatsDataEx(const StatsDataEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatsDataEx::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  is_regional_ = 0u;
  region_id_ = 0u;
  isp_id_ = 0u;
  no_regional_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  aggregator_ = 0u;
  period_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsDataEx::~StatsDataEx() {
  SharedDtor();
}

void StatsDataEx::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
    delete no_regional_key_;
  }
  if (this != default_instance_) {
  }
}

void StatsDataEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsDataEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatsDataEx_descriptor_;
}

const StatsDataEx& StatsDataEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

StatsDataEx* StatsDataEx::default_instance_ = NULL;

StatsDataEx* StatsDataEx::New() const {
  return new StatsDataEx;
}

void StatsDataEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    item_id_ = 0u;
    is_regional_ = 0u;
    region_id_ = 0u;
    isp_id_ = 0u;
    if (has_no_regional_key()) {
      if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
        no_regional_key_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aggregator_ = 0u;
    period_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatsDataEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_item_id;
        break;
      }
      
      // required uint32 item_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_region_id;
        break;
      }
      
      // required uint32 region_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_isp_id;
        break;
      }
      
      // required uint32 isp_id = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isp_id_)));
          set_has_isp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_value;
        break;
      }
      
      // required uint64 value = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_time;
        break;
      }
      
      // required uint32 time = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_aggregator;
        break;
      }
      
      // optional uint32 aggregator = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggregator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aggregator_)));
          set_has_aggregator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_period;
        break;
      }
      
      // optional uint32 period = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_is_regional;
        break;
      }
      
      // required uint32 is_regional = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_regional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_regional_)));
          set_has_is_regional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_no_regional_key;
        break;
      }
      
      // required string no_regional_key = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_no_regional_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_no_regional_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->no_regional_key().data(), this->no_regional_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatsDataEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(), output);
  }
  
  // required uint32 item_id = 20;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item_id(), output);
  }
  
  // required uint32 region_id = 30;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->region_id(), output);
  }
  
  // required uint32 isp_id = 40;
  if (has_isp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->isp_id(), output);
  }
  
  // required uint64 value = 50;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->value(), output);
  }
  
  // required uint32 time = 60;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->time(), output);
  }
  
  // optional uint32 aggregator = 70;
  if (has_aggregator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->aggregator(), output);
  }
  
  // optional uint32 period = 80;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->period(), output);
  }
  
  // required uint32 is_regional = 90;
  if (has_is_regional()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->is_regional(), output);
  }
  
  // required string no_regional_key = 100;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->no_regional_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatsDataEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uuid(), target);
  }
  
  // required uint32 item_id = 20;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item_id(), target);
  }
  
  // required uint32 region_id = 30;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->region_id(), target);
  }
  
  // required uint32 isp_id = 40;
  if (has_isp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->isp_id(), target);
  }
  
  // required uint64 value = 50;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->value(), target);
  }
  
  // required uint32 time = 60;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->time(), target);
  }
  
  // optional uint32 aggregator = 70;
  if (has_aggregator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->aggregator(), target);
  }
  
  // optional uint32 period = 80;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->period(), target);
  }
  
  // required uint32 is_regional = 90;
  if (has_is_regional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->is_regional(), target);
  }
  
  // required string no_regional_key = 100;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->no_regional_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatsDataEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 10;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required uint32 item_id = 20;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // required uint32 is_regional = 90;
    if (has_is_regional()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_regional());
    }
    
    // required uint32 region_id = 30;
    if (has_region_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }
    
    // required uint32 isp_id = 40;
    if (has_isp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isp_id());
    }
    
    // required string no_regional_key = 100;
    if (has_no_regional_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->no_regional_key());
    }
    
    // required uint64 value = 50;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // required uint32 time = 60;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 aggregator = 70;
    if (has_aggregator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aggregator());
    }
    
    // optional uint32 period = 80;
    if (has_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsDataEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatsDataEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatsDataEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatsDataEx::MergeFrom(const StatsDataEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_regional()) {
      set_is_regional(from.is_regional());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_isp_id()) {
      set_isp_id(from.isp_id());
    }
    if (from.has_no_regional_key()) {
      set_no_regional_key(from.no_regional_key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aggregator()) {
      set_aggregator(from.aggregator());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatsDataEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsDataEx::CopyFrom(const StatsDataEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsDataEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void StatsDataEx::Swap(StatsDataEx* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(item_id_, other->item_id_);
    std::swap(is_regional_, other->is_regional_);
    std::swap(region_id_, other->region_id_);
    std::swap(isp_id_, other->isp_id_);
    std::swap(no_regional_key_, other->no_regional_key_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(aggregator_, other->aggregator_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatsDataEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatsDataEx_descriptor_;
  metadata.reflection = StatsDataEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordStatsExRequest::kStatsDataExListFieldNumber;
#endif  // !_MSC_VER

RecordStatsExRequest::RecordStatsExRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordStatsExRequest::InitAsDefaultInstance() {
}

RecordStatsExRequest::RecordStatsExRequest(const RecordStatsExRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordStatsExRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordStatsExRequest::~RecordStatsExRequest() {
  SharedDtor();
}

void RecordStatsExRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordStatsExRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordStatsExRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordStatsExRequest_descriptor_;
}

const RecordStatsExRequest& RecordStatsExRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

RecordStatsExRequest* RecordStatsExRequest::default_instance_ = NULL;

RecordStatsExRequest* RecordStatsExRequest::New() const {
  return new RecordStatsExRequest;
}

void RecordStatsExRequest::Clear() {
  stats_data_ex_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordStatsExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ucloud.unetanalysis.StatsDataEx stats_data_ex_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_data_ex_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_data_ex_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stats_data_ex_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordStatsExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ucloud.unetanalysis.StatsDataEx stats_data_ex_list = 10;
  for (int i = 0; i < this->stats_data_ex_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stats_data_ex_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordStatsExRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ucloud.unetanalysis.StatsDataEx stats_data_ex_list = 10;
  for (int i = 0; i < this->stats_data_ex_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stats_data_ex_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordStatsExRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .ucloud.unetanalysis.StatsDataEx stats_data_ex_list = 10;
  total_size += 1 * this->stats_data_ex_list_size();
  for (int i = 0; i < this->stats_data_ex_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_data_ex_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordStatsExRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordStatsExRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordStatsExRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordStatsExRequest::MergeFrom(const RecordStatsExRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_data_ex_list_.MergeFrom(from.stats_data_ex_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordStatsExRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordStatsExRequest::CopyFrom(const RecordStatsExRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordStatsExRequest::IsInitialized() const {
  
  for (int i = 0; i < stats_data_ex_list_size(); i++) {
    if (!this->stats_data_ex_list(i).IsInitialized()) return false;
  }
  return true;
}

void RecordStatsExRequest::Swap(RecordStatsExRequest* other) {
  if (other != this) {
    stats_data_ex_list_.Swap(&other->stats_data_ex_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordStatsExRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordStatsExRequest_descriptor_;
  metadata.reflection = RecordStatsExRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNetItemStatsRequest::kUuidFieldNumber;
const int GetNetItemStatsRequest::kObjectNameFieldNumber;
const int GetNetItemStatsRequest::kItemIdFieldNumber;
const int GetNetItemStatsRequest::kRegionIdFieldNumber;
const int GetNetItemStatsRequest::kIspIdFieldNumber;
const int GetNetItemStatsRequest::kStartTimeFieldNumber;
const int GetNetItemStatsRequest::kEndTimeFieldNumber;
const int GetNetItemStatsRequest::kUserGrainFieldNumber;
#endif  // !_MSC_VER

GetNetItemStatsRequest::GetNetItemStatsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetItemStatsRequest::InitAsDefaultInstance() {
}

GetNetItemStatsRequest::GetNetItemStatsRequest(const GetNetItemStatsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetItemStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  region_id_ = 0u;
  isp_id_ = 0u;
  start_time_ = 0u;
  end_time_ = 0u;
  user_grain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetItemStatsRequest::~GetNetItemStatsRequest() {
  SharedDtor();
}

void GetNetItemStatsRequest::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (this != default_instance_) {
  }
}

void GetNetItemStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetItemStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetItemStatsRequest_descriptor_;
}

const GetNetItemStatsRequest& GetNetItemStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetNetItemStatsRequest* GetNetItemStatsRequest::default_instance_ = NULL;

GetNetItemStatsRequest* GetNetItemStatsRequest::New() const {
  return new GetNetItemStatsRequest;
}

void GetNetItemStatsRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    item_id_ = 0u;
    region_id_ = 0u;
    isp_id_ = 0u;
    start_time_ = 0u;
    end_time_ = 0u;
    user_grain_ = 0u;
  }
  uuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetItemStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid(0).data(), this->uuid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_uuid;
        if (input->ExpectTag(162)) goto parse_object_name;
        break;
      }
      
      // optional string object_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_region_id;
        break;
      }
      
      // optional uint32 region_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isp_id;
        break;
      }
      
      // optional uint32 isp_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isp_id_)));
          set_has_isp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_end_time;
        break;
      }
      
      // optional uint32 end_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_user_grain;
        break;
      }
      
      // optional uint32 user_grain = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_grain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_grain_)));
          set_has_user_grain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetItemStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string uuid = 10;
  for (int i = 0; i < this->uuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uuid(i).data(), this->uuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(i), output);
  }
  
  // optional string object_name = 20;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->object_name(), output);
  }
  
  // optional uint32 item_id = 22;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->item_id(), output);
  }
  
  // optional uint32 region_id = 23;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->region_id(), output);
  }
  
  // optional uint32 isp_id = 24;
  if (has_isp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->isp_id(), output);
  }
  
  // optional uint32 start_time = 30;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->start_time(), output);
  }
  
  // optional uint32 end_time = 40;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->end_time(), output);
  }
  
  // optional uint32 user_grain = 50;
  if (has_user_grain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->user_grain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetItemStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string uuid = 10;
  for (int i = 0; i < this->uuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid(i).data(), this->uuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->uuid(i), target);
  }
  
  // optional string object_name = 20;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->object_name(), target);
  }
  
  // optional uint32 item_id = 22;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->item_id(), target);
  }
  
  // optional uint32 region_id = 23;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->region_id(), target);
  }
  
  // optional uint32 isp_id = 24;
  if (has_isp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->isp_id(), target);
  }
  
  // optional uint32 start_time = 30;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->start_time(), target);
  }
  
  // optional uint32 end_time = 40;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->end_time(), target);
  }
  
  // optional uint32 user_grain = 50;
  if (has_user_grain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->user_grain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetItemStatsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string object_name = 20;
    if (has_object_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }
    
    // optional uint32 item_id = 22;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 region_id = 23;
    if (has_region_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }
    
    // optional uint32 isp_id = 24;
    if (has_isp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isp_id());
    }
    
    // optional uint32 start_time = 30;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // optional uint32 end_time = 40;
    if (has_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }
    
    // optional uint32 user_grain = 50;
    if (has_user_grain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_grain());
    }
    
  }
  // repeated string uuid = 10;
  total_size += 1 * this->uuid_size();
  for (int i = 0; i < this->uuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uuid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetItemStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetItemStatsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetItemStatsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetItemStatsRequest::MergeFrom(const GetNetItemStatsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_.MergeFrom(from.uuid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_isp_id()) {
      set_isp_id(from.isp_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_user_grain()) {
      set_user_grain(from.user_grain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetItemStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetItemStatsRequest::CopyFrom(const GetNetItemStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetItemStatsRequest::IsInitialized() const {
  
  return true;
}

void GetNetItemStatsRequest::Swap(GetNetItemStatsRequest* other) {
  if (other != this) {
    uuid_.Swap(&other->uuid_);
    std::swap(object_name_, other->object_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(isp_id_, other->isp_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(user_grain_, other->user_grain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetItemStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetItemStatsRequest_descriptor_;
  metadata.reflection = GetNetItemStatsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatsInfo::kValueFieldNumber;
const int StatsInfo::kValueTimeFieldNumber;
const int StatsInfo::kRegionIdFieldNumber;
const int StatsInfo::kIspIdFieldNumber;
const int StatsInfo::kNoRegionalKeyFieldNumber;
#endif  // !_MSC_VER

StatsInfo::StatsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatsInfo::InitAsDefaultInstance() {
}

StatsInfo::StatsInfo(const StatsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatsInfo::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  value_time_ = 0u;
  region_id_ = 0u;
  isp_id_ = 0u;
  no_regional_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatsInfo::~StatsInfo() {
  SharedDtor();
}

void StatsInfo::SharedDtor() {
  if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
    delete no_regional_key_;
  }
  if (this != default_instance_) {
  }
}

void StatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatsInfo_descriptor_;
}

const StatsInfo& StatsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

StatsInfo* StatsInfo::default_instance_ = NULL;

StatsInfo* StatsInfo::New() const {
  return new StatsInfo;
}

void StatsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    value_time_ = 0u;
    region_id_ = 0u;
    isp_id_ = 0u;
    if (has_no_regional_key()) {
      if (no_regional_key_ != &::google::protobuf::internal::kEmptyString) {
        no_regional_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_value_time;
        break;
      }
      
      // required uint32 value_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_time_)));
          set_has_value_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_region_id;
        break;
      }
      
      // required uint32 region_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_isp_id;
        break;
      }
      
      // required uint32 isp_id = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isp_id_)));
          set_has_isp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_no_regional_key;
        break;
      }
      
      // optional string no_regional_key = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_no_regional_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_no_regional_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->no_regional_key().data(), this->no_regional_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 value = 10;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->value(), output);
  }
  
  // required uint32 value_time = 20;
  if (has_value_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->value_time(), output);
  }
  
  // required uint32 region_id = 31;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->region_id(), output);
  }
  
  // required uint32 isp_id = 32;
  if (has_isp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->isp_id(), output);
  }
  
  // optional string no_regional_key = 33;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->no_regional_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 value = 10;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->value(), target);
  }
  
  // required uint32 value_time = 20;
  if (has_value_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->value_time(), target);
  }
  
  // required uint32 region_id = 31;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->region_id(), target);
  }
  
  // required uint32 isp_id = 32;
  if (has_isp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->isp_id(), target);
  }
  
  // optional string no_regional_key = 33;
  if (has_no_regional_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->no_regional_key().data(), this->no_regional_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->no_regional_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 value = 10;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // required uint32 value_time = 20;
    if (has_value_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_time());
    }
    
    // required uint32 region_id = 31;
    if (has_region_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }
    
    // required uint32 isp_id = 32;
    if (has_isp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isp_id());
    }
    
    // optional string no_regional_key = 33;
    if (has_no_regional_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->no_regional_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatsInfo::MergeFrom(const StatsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_time()) {
      set_value_time(from.value_time());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_isp_id()) {
      set_isp_id(from.isp_id());
    }
    if (from.has_no_regional_key()) {
      set_no_regional_key(from.no_regional_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsInfo::CopyFrom(const StatsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StatsInfo::Swap(StatsInfo* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(value_time_, other->value_time_);
    std::swap(region_id_, other->region_id_);
    std::swap(isp_id_, other->isp_id_);
    std::swap(no_regional_key_, other->no_regional_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatsInfo_descriptor_;
  metadata.reflection = StatsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorData::kUuidFieldNumber;
const int MonitorData::kItemIdFieldNumber;
const int MonitorData::kIsRegionalFieldNumber;
const int MonitorData::kGrainSizeFieldNumber;
const int MonitorData::kStatsInfoFieldNumber;
#endif  // !_MSC_VER

MonitorData::MonitorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonitorData::InitAsDefaultInstance() {
}

MonitorData::MonitorData(const MonitorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonitorData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  is_regional_ = 0u;
  grain_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorData::~MonitorData() {
  SharedDtor();
}

void MonitorData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void MonitorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorData_descriptor_;
}

const MonitorData& MonitorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

MonitorData* MonitorData::default_instance_ = NULL;

MonitorData* MonitorData::New() const {
  return new MonitorData;
}

void MonitorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    item_id_ = 0u;
    is_regional_ = 0u;
    grain_size_ = 0u;
  }
  stats_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_is_regional;
        break;
      }
      
      // optional uint32 is_regional = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_regional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_regional_)));
          set_has_is_regional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_stats_info;
        break;
      }
      
      // repeated .ucloud.unetanalysis.StatsInfo stats_info = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_stats_info;
        if (input->ExpectTag(480)) goto parse_grain_size;
        break;
      }
      
      // optional uint32 grain_size = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grain_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grain_size_)));
          set_has_grain_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonitorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(), output);
  }
  
  // optional uint32 is_regional = 20;
  if (has_is_regional()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->is_regional(), output);
  }
  
  // optional uint32 item_id = 30;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->item_id(), output);
  }
  
  // repeated .ucloud.unetanalysis.StatsInfo stats_info = 40;
  for (int i = 0; i < this->stats_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->stats_info(i), output);
  }
  
  // optional uint32 grain_size = 60;
  if (has_grain_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->grain_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonitorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uuid(), target);
  }
  
  // optional uint32 is_regional = 20;
  if (has_is_regional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->is_regional(), target);
  }
  
  // optional uint32 item_id = 30;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->item_id(), target);
  }
  
  // repeated .ucloud.unetanalysis.StatsInfo stats_info = 40;
  for (int i = 0; i < this->stats_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->stats_info(i), target);
  }
  
  // optional uint32 grain_size = 60;
  if (has_grain_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->grain_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonitorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 10;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional uint32 item_id = 30;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 is_regional = 20;
    if (has_is_regional()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_regional());
    }
    
    // optional uint32 grain_size = 60;
    if (has_grain_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grain_size());
    }
    
  }
  // repeated .ucloud.unetanalysis.StatsInfo stats_info = 40;
  total_size += 2 * this->stats_info_size();
  for (int i = 0; i < this->stats_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorData::MergeFrom(const MonitorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_info_.MergeFrom(from.stats_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_is_regional()) {
      set_is_regional(from.is_regional());
    }
    if (from.has_grain_size()) {
      set_grain_size(from.grain_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorData::CopyFrom(const MonitorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorData::IsInitialized() const {
  
  for (int i = 0; i < stats_info_size(); i++) {
    if (!this->stats_info(i).IsInitialized()) return false;
  }
  return true;
}

void MonitorData::Swap(MonitorData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(item_id_, other->item_id_);
    std::swap(is_regional_, other->is_regional_);
    std::swap(grain_size_, other->grain_size_);
    stats_info_.Swap(&other->stats_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorData_descriptor_;
  metadata.reflection = MonitorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemStatsResponse::kRcFieldNumber;
const int GetItemStatsResponse::kMonitorDataFieldNumber;
#endif  // !_MSC_VER

GetItemStatsResponse::GetItemStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemStatsResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::ucloud::ResponseCode*>(&::ucloud::ResponseCode::default_instance());
}

GetItemStatsResponse::GetItemStatsResponse(const GetItemStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemStatsResponse::~GetItemStatsResponse() {
  SharedDtor();
}

void GetItemStatsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void GetItemStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemStatsResponse_descriptor_;
}

const GetItemStatsResponse& GetItemStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetItemStatsResponse* GetItemStatsResponse::default_instance_ = NULL;

GetItemStatsResponse* GetItemStatsResponse::New() const {
  return new GetItemStatsResponse;
}

void GetItemStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::ucloud::ResponseCode::Clear();
    }
  }
  monitor_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ucloud.ResponseCode rc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_monitor_data;
        break;
      }
      
      // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monitor_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monitor_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_monitor_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rc(), output);
  }
  
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  for (int i = 0; i < this->monitor_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->monitor_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rc(), target);
  }
  
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  for (int i = 0; i < this->monitor_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->monitor_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemStatsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ucloud.ResponseCode rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }
    
  }
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  total_size += 2 * this->monitor_data_size();
  for (int i = 0; i < this->monitor_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monitor_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemStatsResponse::MergeFrom(const GetItemStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  monitor_data_.MergeFrom(from.monitor_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::ucloud::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemStatsResponse::CopyFrom(const GetItemStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemStatsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  for (int i = 0; i < monitor_data_size(); i++) {
    if (!this->monitor_data(i).IsInitialized()) return false;
  }
  return true;
}

void GetItemStatsResponse::Swap(GetItemStatsResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    monitor_data_.Swap(&other->monitor_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemStatsResponse_descriptor_;
  metadata.reflection = GetItemStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNetRankRequest::kItemIdFieldNumber;
const int GetNetRankRequest::kStartFieldNumber;
const int GetNetRankRequest::kEndFieldNumber;
const int GetNetRankRequest::kRankTypeFieldNumber;
const int GetNetRankRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

GetNetRankRequest::GetNetRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetRankRequest::InitAsDefaultInstance() {
}

GetNetRankRequest::GetNetRankRequest(const GetNetRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetRankRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  start_ = 0u;
  end_ = 0u;
  rank_type_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetRankRequest::~GetNetRankRequest() {
  SharedDtor();
}

void GetNetRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNetRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetRankRequest_descriptor_;
}

const GetNetRankRequest& GetNetRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetNetRankRequest* GetNetRankRequest::default_instance_ = NULL;

GetNetRankRequest* GetNetRankRequest::New() const {
  return new GetNetRankRequest;
}

void GetNetRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    start_ = 0u;
    end_ = 0u;
    rank_type_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_start;
        break;
      }
      
      // optional uint32 start = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_end;
        break;
      }
      
      // optional uint32 end = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rank_type;
        break;
      }
      
      // optional uint32 rank_type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 10;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->item_id(), output);
  }
  
  // optional uint32 start = 20;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->start(), output);
  }
  
  // optional uint32 end = 30;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->end(), output);
  }
  
  // optional uint32 rank_type = 40;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->rank_type(), output);
  }
  
  // optional uint32 time = 50;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 10;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->item_id(), target);
  }
  
  // optional uint32 start = 20;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->start(), target);
  }
  
  // optional uint32 end = 30;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->end(), target);
  }
  
  // optional uint32 rank_type = 40;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->rank_type(), target);
  }
  
  // optional uint32 time = 50;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetRankRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 10;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 start = 20;
    if (has_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }
    
    // optional uint32 end = 30;
    if (has_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
    // optional uint32 rank_type = 40;
    if (has_rank_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }
    
    // optional uint32 time = 50;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetRankRequest::MergeFrom(const GetNetRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetRankRequest::CopyFrom(const GetNetRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetRankRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetNetRankRequest::Swap(GetNetRankRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetRankRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetRankRequest_descriptor_;
  metadata.reflection = GetNetRankRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankData::kUuidFieldNumber;
const int RankData::kValueFieldNumber;
#endif  // !_MSC_VER

RankData::RankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankData::InitAsDefaultInstance() {
}

RankData::RankData(const RankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankData::~RankData() {
  SharedDtor();
}

void RankData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void RankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankData_descriptor_;
}

const RankData& RankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

RankData* RankData::default_instance_ = NULL;

RankData* RankData::New() const {
  return new RankData;
}

void RankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_value;
        break;
      }
      
      // optional uint64 value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(), output);
  }
  
  // optional uint64 value = 20;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uuid(), target);
  }
  
  // optional uint64 value = 20;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 10;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional uint64 value = 20;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankData::MergeFrom(const RankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankData::CopyFrom(const RankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankData::IsInitialized() const {
  
  return true;
}

void RankData::Swap(RankData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankData_descriptor_;
  metadata.reflection = RankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNetRankResponse::kRcFieldNumber;
const int GetNetRankResponse::kItemIdFieldNumber;
const int GetNetRankResponse::kRankDataFieldNumber;
#endif  // !_MSC_VER

GetNetRankResponse::GetNetRankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetRankResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::ucloud::ResponseCode*>(&::ucloud::ResponseCode::default_instance());
}

GetNetRankResponse::GetNetRankResponse(const GetNetRankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetRankResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetRankResponse::~GetNetRankResponse() {
  SharedDtor();
}

void GetNetRankResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void GetNetRankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetRankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetRankResponse_descriptor_;
}

const GetNetRankResponse& GetNetRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetNetRankResponse* GetNetRankResponse::default_instance_ = NULL;

GetNetRankResponse* GetNetRankResponse::New() const {
  return new GetNetRankResponse;
}

void GetNetRankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::ucloud::ResponseCode::Clear();
    }
    item_id_ = 0u;
  }
  rank_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ucloud.ResponseCode rc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_rank_data;
        break;
      }
      
      // repeated .ucloud.unetanalysis.RankData rank_data = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_rank_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rc(), output);
  }
  
  // optional uint32 item_id = 20;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->item_id(), output);
  }
  
  // repeated .ucloud.unetanalysis.RankData rank_data = 30;
  for (int i = 0; i < this->rank_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->rank_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetRankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rc(), target);
  }
  
  // optional uint32 item_id = 20;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->item_id(), target);
  }
  
  // repeated .ucloud.unetanalysis.RankData rank_data = 30;
  for (int i = 0; i < this->rank_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->rank_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ucloud.ResponseCode rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }
    
    // optional uint32 item_id = 20;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
  }
  // repeated .ucloud.unetanalysis.RankData rank_data = 30;
  total_size += 2 * this->rank_data_size();
  for (int i = 0; i < this->rank_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetRankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetRankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetRankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetRankResponse::MergeFrom(const GetNetRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_data_.MergeFrom(from.rank_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::ucloud::ResponseCode::MergeFrom(from.rc());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetRankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetRankResponse::CopyFrom(const GetNetRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetRankResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void GetNetRankResponse::Swap(GetNetRankResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(item_id_, other->item_id_);
    rank_data_.Swap(&other->rank_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetRankResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetRankResponse_descriptor_;
  metadata.reflection = GetNetRankResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ip_Info::kIpFieldNumber;
const int Ip_Info::kAccountIdFieldNumber;
#endif  // !_MSC_VER

Ip_Info::Ip_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ip_Info::InitAsDefaultInstance() {
}

Ip_Info::Ip_Info(const Ip_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ip_Info::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ip_Info::~Ip_Info() {
  SharedDtor();
}

void Ip_Info::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Ip_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ip_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ip_Info_descriptor_;
}

const Ip_Info& Ip_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

Ip_Info* Ip_Info::default_instance_ = NULL;

Ip_Info* Ip_Info::New() const {
  return new Ip_Info;
}

void Ip_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ip_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_account_id;
        break;
      }
      
      // optional uint32 account_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ip_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ip(), output);
  }
  
  // optional uint32 account_id = 20;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ip_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }
  
  // optional uint32 account_id = 20;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ip_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 account_id = 20;
    if (has_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ip_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ip_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ip_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ip_Info::MergeFrom(const Ip_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ip_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ip_Info::CopyFrom(const Ip_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ip_Info::IsInitialized() const {
  
  return true;
}

void Ip_Info::Swap(Ip_Info* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ip_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ip_Info_descriptor_;
  metadata.reflection = Ip_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIpsRequest::kReginFieldNumber;
#endif  // !_MSC_VER

GetIpsRequest::GetIpsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIpsRequest::InitAsDefaultInstance() {
}

GetIpsRequest::GetIpsRequest(const GetIpsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIpsRequest::SharedCtor() {
  _cached_size_ = 0;
  regin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIpsRequest::~GetIpsRequest() {
  SharedDtor();
}

void GetIpsRequest::SharedDtor() {
  if (regin_ != &::google::protobuf::internal::kEmptyString) {
    delete regin_;
  }
  if (this != default_instance_) {
  }
}

void GetIpsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIpsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIpsRequest_descriptor_;
}

const GetIpsRequest& GetIpsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetIpsRequest* GetIpsRequest::default_instance_ = NULL;

GetIpsRequest* GetIpsRequest::New() const {
  return new GetIpsRequest;
}

void GetIpsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regin()) {
      if (regin_ != &::google::protobuf::internal::kEmptyString) {
        regin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIpsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string regin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regin().data(), this->regin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIpsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string regin = 10;
  if (has_regin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regin().data(), this->regin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->regin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIpsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string regin = 10;
  if (has_regin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regin().data(), this->regin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->regin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIpsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string regin = 10;
    if (has_regin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIpsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIpsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIpsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIpsRequest::MergeFrom(const GetIpsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regin()) {
      set_regin(from.regin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIpsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIpsRequest::CopyFrom(const GetIpsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIpsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetIpsRequest::Swap(GetIpsRequest* other) {
  if (other != this) {
    std::swap(regin_, other->regin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIpsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIpsRequest_descriptor_;
  metadata.reflection = GetIpsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIpsResponse::kReginFieldNumber;
const int GetIpsResponse::kIpsFieldNumber;
#endif  // !_MSC_VER

GetIpsResponse::GetIpsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIpsResponse::InitAsDefaultInstance() {
}

GetIpsResponse::GetIpsResponse(const GetIpsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIpsResponse::SharedCtor() {
  _cached_size_ = 0;
  regin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIpsResponse::~GetIpsResponse() {
  SharedDtor();
}

void GetIpsResponse::SharedDtor() {
  if (regin_ != &::google::protobuf::internal::kEmptyString) {
    delete regin_;
  }
  if (this != default_instance_) {
  }
}

void GetIpsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIpsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIpsResponse_descriptor_;
}

const GetIpsResponse& GetIpsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetIpsResponse* GetIpsResponse::default_instance_ = NULL;

GetIpsResponse* GetIpsResponse::New() const {
  return new GetIpsResponse;
}

void GetIpsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regin()) {
      if (regin_ != &::google::protobuf::internal::kEmptyString) {
        regin_->clear();
      }
    }
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIpsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string regin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regin().data(), this->regin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        break;
      }
      
      // repeated .ucloud.unetanalysis.Ip_Info ips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIpsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string regin = 10;
  if (has_regin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regin().data(), this->regin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->regin(), output);
  }
  
  // repeated .ucloud.unetanalysis.Ip_Info ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIpsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string regin = 10;
  if (has_regin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regin().data(), this->regin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->regin(), target);
  }
  
  // repeated .ucloud.unetanalysis.Ip_Info ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIpsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string regin = 10;
    if (has_regin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regin());
    }
    
  }
  // repeated .ucloud.unetanalysis.Ip_Info ips = 20;
  total_size += 2 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIpsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIpsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIpsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIpsResponse::MergeFrom(const GetIpsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regin()) {
      set_regin(from.regin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIpsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIpsResponse::CopyFrom(const GetIpsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIpsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetIpsResponse::Swap(GetIpsResponse* other) {
  if (other != this) {
    std::swap(regin_, other->regin_);
    ips_.Swap(&other->ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIpsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIpsResponse_descriptor_;
  metadata.reflection = GetIpsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushIpsFileRequest::kNameFieldNumber;
#endif  // !_MSC_VER

PushIpsFileRequest::PushIpsFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushIpsFileRequest::InitAsDefaultInstance() {
}

PushIpsFileRequest::PushIpsFileRequest(const PushIpsFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushIpsFileRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushIpsFileRequest::~PushIpsFileRequest() {
  SharedDtor();
}

void PushIpsFileRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PushIpsFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushIpsFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushIpsFileRequest_descriptor_;
}

const PushIpsFileRequest& PushIpsFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

PushIpsFileRequest* PushIpsFileRequest::default_instance_ = NULL;

PushIpsFileRequest* PushIpsFileRequest::New() const {
  return new PushIpsFileRequest;
}

void PushIpsFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushIpsFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushIpsFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushIpsFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushIpsFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushIpsFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushIpsFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushIpsFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushIpsFileRequest::MergeFrom(const PushIpsFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushIpsFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushIpsFileRequest::CopyFrom(const PushIpsFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushIpsFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PushIpsFileRequest::Swap(PushIpsFileRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushIpsFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushIpsFileRequest_descriptor_;
  metadata.reflection = PushIpsFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUserLvlRequest::kUserIdFieldNumber;
const int SetUserLvlRequest::kLvlFieldNumber;
#endif  // !_MSC_VER

SetUserLvlRequest::SetUserLvlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUserLvlRequest::InitAsDefaultInstance() {
}

SetUserLvlRequest::SetUserLvlRequest(const SetUserLvlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUserLvlRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUserLvlRequest::~SetUserLvlRequest() {
  SharedDtor();
}

void SetUserLvlRequest::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void SetUserLvlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserLvlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUserLvlRequest_descriptor_;
}

const SetUserLvlRequest& SetUserLvlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

SetUserLvlRequest* SetUserLvlRequest::default_instance_ = NULL;

SetUserLvlRequest* SetUserLvlRequest::New() const {
  return new SetUserLvlRequest;
}

void SetUserLvlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    lvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUserLvlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_lvl;
        break;
      }
      
      // optional uint32 lvl = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUserLvlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 10;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->user_id(), output);
  }
  
  // optional uint32 lvl = 20;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->lvl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUserLvlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 10;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user_id(), target);
  }
  
  // optional uint32 lvl = 20;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->lvl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUserLvlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 10;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional uint32 lvl = 20;
    if (has_lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserLvlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUserLvlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUserLvlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUserLvlRequest::MergeFrom(const SetUserLvlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUserLvlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserLvlRequest::CopyFrom(const SetUserLvlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserLvlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetUserLvlRequest::Swap(SetUserLvlRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(lvl_, other->lvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUserLvlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUserLvlRequest_descriptor_;
  metadata.reflection = SetUserLvlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUserLvlResponse::kRcFieldNumber;
const int SetUserLvlResponse::kUserIdFieldNumber;
const int SetUserLvlResponse::kLvlFieldNumber;
#endif  // !_MSC_VER

SetUserLvlResponse::SetUserLvlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUserLvlResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::ucloud::ResponseCode*>(&::ucloud::ResponseCode::default_instance());
}

SetUserLvlResponse::SetUserLvlResponse(const SetUserLvlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUserLvlResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUserLvlResponse::~SetUserLvlResponse() {
  SharedDtor();
}

void SetUserLvlResponse::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete rc_;
  }
}

void SetUserLvlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserLvlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUserLvlResponse_descriptor_;
}

const SetUserLvlResponse& SetUserLvlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

SetUserLvlResponse* SetUserLvlResponse::default_instance_ = NULL;

SetUserLvlResponse* SetUserLvlResponse::New() const {
  return new SetUserLvlResponse;
}

void SetUserLvlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::ucloud::ResponseCode::Clear();
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    lvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUserLvlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ucloud.ResponseCode rc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lvl;
        break;
      }
      
      // optional uint32 lvl = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUserLvlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rc(), output);
  }
  
  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->user_id(), output);
  }
  
  // optional uint32 lvl = 30;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->lvl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUserLvlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rc(), target);
  }
  
  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_id(), target);
  }
  
  // optional uint32 lvl = 30;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->lvl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUserLvlResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ucloud.ResponseCode rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }
    
    // optional string user_id = 20;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional uint32 lvl = 30;
    if (has_lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserLvlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUserLvlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUserLvlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUserLvlResponse::MergeFrom(const SetUserLvlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::ucloud::ResponseCode::MergeFrom(from.rc());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUserLvlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserLvlResponse::CopyFrom(const SetUserLvlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserLvlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void SetUserLvlResponse::Swap(SetUserLvlResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(user_id_, other->user_id_);
    std::swap(lvl_, other->lvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUserLvlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUserLvlResponse_descriptor_;
  metadata.reflection = SetUserLvlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLvlRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserLvlRequest::GetUserLvlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserLvlRequest::InitAsDefaultInstance() {
}

GetUserLvlRequest::GetUserLvlRequest(const GetUserLvlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserLvlRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLvlRequest::~GetUserLvlRequest() {
  SharedDtor();
}

void GetUserLvlRequest::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void GetUserLvlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserLvlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserLvlRequest_descriptor_;
}

const GetUserLvlRequest& GetUserLvlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetUserLvlRequest* GetUserLvlRequest::default_instance_ = NULL;

GetUserLvlRequest* GetUserLvlRequest::New() const {
  return new GetUserLvlRequest;
}

void GetUserLvlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserLvlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserLvlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 10;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserLvlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 10;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserLvlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 10;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLvlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserLvlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserLvlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserLvlRequest::MergeFrom(const GetUserLvlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserLvlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserLvlRequest::CopyFrom(const GetUserLvlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLvlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetUserLvlRequest::Swap(GetUserLvlRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserLvlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserLvlRequest_descriptor_;
  metadata.reflection = GetUserLvlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserLvlResponse::kRcFieldNumber;
const int GetUserLvlResponse::kUserIdFieldNumber;
const int GetUserLvlResponse::kLvlFieldNumber;
const int GetUserLvlResponse::kMinGrainSizeFieldNumber;
const int GetUserLvlResponse::kLvlEffectiveTimeFieldNumber;
const int GetUserLvlResponse::kStartAnalysisTimeFieldNumber;
const int GetUserLvlResponse::kStoreTimeFieldNumber;
const int GetUserLvlResponse::kDataDimensionFieldNumber;
const int GetUserLvlResponse::kItemIdsFieldNumber;
#endif  // !_MSC_VER

GetUserLvlResponse::GetUserLvlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserLvlResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::ucloud::ResponseCode*>(&::ucloud::ResponseCode::default_instance());
}

GetUserLvlResponse::GetUserLvlResponse(const GetUserLvlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserLvlResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvl_ = 0u;
  min_grain_size_ = 0u;
  lvl_effective_time_ = 0u;
  start_analysis_time_ = 0u;
  store_time_ = 0u;
  data_dimension_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserLvlResponse::~GetUserLvlResponse() {
  SharedDtor();
}

void GetUserLvlResponse::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete rc_;
  }
}

void GetUserLvlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserLvlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserLvlResponse_descriptor_;
}

const GetUserLvlResponse& GetUserLvlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetUserLvlResponse* GetUserLvlResponse::default_instance_ = NULL;

GetUserLvlResponse* GetUserLvlResponse::New() const {
  return new GetUserLvlResponse;
}

void GetUserLvlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::ucloud::ResponseCode::Clear();
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    lvl_ = 0u;
    min_grain_size_ = 0u;
    lvl_effective_time_ = 0u;
    start_analysis_time_ = 0u;
    store_time_ = 0u;
    data_dimension_ = 0u;
  }
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserLvlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ucloud.ResponseCode rc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lvl;
        break;
      }
      
      // optional uint32 lvl = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_min_grain_size;
        break;
      }
      
      // optional uint32 min_grain_size = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_grain_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_grain_size_)));
          set_has_min_grain_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_lvl_effective_time;
        break;
      }
      
      // optional uint32 lvl_effective_time = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl_effective_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_effective_time_)));
          set_has_lvl_effective_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_start_analysis_time;
        break;
      }
      
      // optional uint32 start_analysis_time = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_analysis_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_analysis_time_)));
          set_has_start_analysis_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_store_time;
        break;
      }
      
      // optional uint32 store_time = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_time_)));
          set_has_store_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_data_dimension;
        break;
      }
      
      // optional uint32 data_dimension = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_dimension_)));
          set_has_data_dimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_item_ids;
        break;
      }
      
      // repeated uint32 item_ids = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 720, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_item_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserLvlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rc(), output);
  }
  
  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->user_id(), output);
  }
  
  // optional uint32 lvl = 30;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->lvl(), output);
  }
  
  // optional uint32 min_grain_size = 40;
  if (has_min_grain_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->min_grain_size(), output);
  }
  
  // optional uint32 lvl_effective_time = 50;
  if (has_lvl_effective_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->lvl_effective_time(), output);
  }
  
  // optional uint32 start_analysis_time = 60;
  if (has_start_analysis_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->start_analysis_time(), output);
  }
  
  // optional uint32 store_time = 70;
  if (has_store_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->store_time(), output);
  }
  
  // optional uint32 data_dimension = 80;
  if (has_data_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->data_dimension(), output);
  }
  
  // repeated uint32 item_ids = 90;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      90, this->item_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserLvlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rc(), target);
  }
  
  // optional string user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_id(), target);
  }
  
  // optional uint32 lvl = 30;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->lvl(), target);
  }
  
  // optional uint32 min_grain_size = 40;
  if (has_min_grain_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->min_grain_size(), target);
  }
  
  // optional uint32 lvl_effective_time = 50;
  if (has_lvl_effective_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->lvl_effective_time(), target);
  }
  
  // optional uint32 start_analysis_time = 60;
  if (has_start_analysis_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->start_analysis_time(), target);
  }
  
  // optional uint32 store_time = 70;
  if (has_store_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->store_time(), target);
  }
  
  // optional uint32 data_dimension = 80;
  if (has_data_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->data_dimension(), target);
  }
  
  // repeated uint32 item_ids = 90;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(90, this->item_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserLvlResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ucloud.ResponseCode rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }
    
    // optional string user_id = 20;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional uint32 lvl = 30;
    if (has_lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }
    
    // optional uint32 min_grain_size = 40;
    if (has_min_grain_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_grain_size());
    }
    
    // optional uint32 lvl_effective_time = 50;
    if (has_lvl_effective_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl_effective_time());
    }
    
    // optional uint32 start_analysis_time = 60;
    if (has_start_analysis_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_analysis_time());
    }
    
    // optional uint32 store_time = 70;
    if (has_store_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_time());
    }
    
    // optional uint32 data_dimension = 80;
    if (has_data_dimension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_dimension());
    }
    
  }
  // repeated uint32 item_ids = 90;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->item_ids(i));
    }
    total_size += 2 * this->item_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserLvlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserLvlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserLvlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserLvlResponse::MergeFrom(const GetUserLvlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::ucloud::ResponseCode::MergeFrom(from.rc());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_min_grain_size()) {
      set_min_grain_size(from.min_grain_size());
    }
    if (from.has_lvl_effective_time()) {
      set_lvl_effective_time(from.lvl_effective_time());
    }
    if (from.has_start_analysis_time()) {
      set_start_analysis_time(from.start_analysis_time());
    }
    if (from.has_store_time()) {
      set_store_time(from.store_time());
    }
    if (from.has_data_dimension()) {
      set_data_dimension(from.data_dimension());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserLvlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserLvlResponse::CopyFrom(const GetUserLvlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserLvlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  return true;
}

void GetUserLvlResponse::Swap(GetUserLvlResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    std::swap(user_id_, other->user_id_);
    std::swap(lvl_, other->lvl_);
    std::swap(min_grain_size_, other->min_grain_size_);
    std::swap(lvl_effective_time_, other->lvl_effective_time_);
    std::swap(start_analysis_time_, other->start_analysis_time_);
    std::swap(store_time_, other->store_time_);
    std::swap(data_dimension_, other->data_dimension_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserLvlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserLvlResponse_descriptor_;
  metadata.reflection = GetUserLvlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UuidExInfo::kUuidFieldNumber;
const int UuidExInfo::kCreatedTimeFieldNumber;
#endif  // !_MSC_VER

UuidExInfo::UuidExInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UuidExInfo::InitAsDefaultInstance() {
}

UuidExInfo::UuidExInfo(const UuidExInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UuidExInfo::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  created_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UuidExInfo::~UuidExInfo() {
  SharedDtor();
}

void UuidExInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void UuidExInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UuidExInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UuidExInfo_descriptor_;
}

const UuidExInfo& UuidExInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

UuidExInfo* UuidExInfo::default_instance_ = NULL;

UuidExInfo* UuidExInfo::New() const {
  return new UuidExInfo;
}

void UuidExInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    created_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UuidExInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_created_time;
        break;
      }
      
      // optional uint32 created_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UuidExInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(), output);
  }
  
  // optional uint32 created_time = 20;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->created_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UuidExInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 10;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->uuid(), target);
  }
  
  // optional uint32 created_time = 20;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->created_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UuidExInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 10;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional uint32 created_time = 20;
    if (has_created_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UuidExInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UuidExInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UuidExInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UuidExInfo::MergeFrom(const UuidExInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UuidExInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidExInfo::CopyFrom(const UuidExInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidExInfo::IsInitialized() const {
  
  return true;
}

void UuidExInfo::Swap(UuidExInfo* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(created_time_, other->created_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UuidExInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UuidExInfo_descriptor_;
  metadata.reflection = UuidExInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNetItemStatsForUserRequest::kUuidFieldNumber;
const int GetNetItemStatsForUserRequest::kObjectNameFieldNumber;
const int GetNetItemStatsForUserRequest::kItemIdFieldNumber;
const int GetNetItemStatsForUserRequest::kRegionIdFieldNumber;
const int GetNetItemStatsForUserRequest::kIspIdFieldNumber;
const int GetNetItemStatsForUserRequest::kStartTimeFieldNumber;
const int GetNetItemStatsForUserRequest::kEndTimeFieldNumber;
const int GetNetItemStatsForUserRequest::kUserIdFieldNumber;
const int GetNetItemStatsForUserRequest::kUuidExInfoFieldNumber;
#endif  // !_MSC_VER

GetNetItemStatsForUserRequest::GetNetItemStatsForUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNetItemStatsForUserRequest::InitAsDefaultInstance() {
}

GetNetItemStatsForUserRequest::GetNetItemStatsForUserRequest(const GetNetItemStatsForUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNetItemStatsForUserRequest::SharedCtor() {
  _cached_size_ = 0;
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  region_id_ = 0u;
  isp_id_ = 0u;
  start_time_ = 0u;
  end_time_ = 0u;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNetItemStatsForUserRequest::~GetNetItemStatsForUserRequest() {
  SharedDtor();
}

void GetNetItemStatsForUserRequest::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void GetNetItemStatsForUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNetItemStatsForUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNetItemStatsForUserRequest_descriptor_;
}

const GetNetItemStatsForUserRequest& GetNetItemStatsForUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetNetItemStatsForUserRequest* GetNetItemStatsForUserRequest::default_instance_ = NULL;

GetNetItemStatsForUserRequest* GetNetItemStatsForUserRequest::New() const {
  return new GetNetItemStatsForUserRequest;
}

void GetNetItemStatsForUserRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    item_id_ = 0u;
    region_id_ = 0u;
    isp_id_ = 0u;
    start_time_ = 0u;
    end_time_ = 0u;
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  uuid_.Clear();
  uuid_ex_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNetItemStatsForUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid(0).data(), this->uuid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_uuid;
        if (input->ExpectTag(162)) goto parse_object_name;
        break;
      }
      
      // optional string object_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_item_id;
        break;
      }
      
      // optional uint32 item_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_region_id;
        break;
      }
      
      // optional uint32 region_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isp_id;
        break;
      }
      
      // optional uint32 isp_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isp_id_)));
          set_has_isp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_start_time;
        break;
      }
      
      // optional uint32 start_time = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_end_time;
        break;
      }
      
      // optional uint32 end_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_uuid_ex_info;
        break;
      }
      
      // repeated .ucloud.unetanalysis.UuidExInfo uuid_ex_info = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid_ex_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uuid_ex_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_uuid_ex_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNetItemStatsForUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string uuid = 10;
  for (int i = 0; i < this->uuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uuid(i).data(), this->uuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->uuid(i), output);
  }
  
  // optional string object_name = 20;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->object_name(), output);
  }
  
  // optional uint32 item_id = 22;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->item_id(), output);
  }
  
  // optional uint32 region_id = 23;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->region_id(), output);
  }
  
  // optional uint32 isp_id = 24;
  if (has_isp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->isp_id(), output);
  }
  
  // optional uint32 start_time = 30;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->start_time(), output);
  }
  
  // optional uint32 end_time = 40;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->end_time(), output);
  }
  
  // optional string user_id = 50;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->user_id(), output);
  }
  
  // repeated .ucloud.unetanalysis.UuidExInfo uuid_ex_info = 60;
  for (int i = 0; i < this->uuid_ex_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->uuid_ex_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNetItemStatsForUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string uuid = 10;
  for (int i = 0; i < this->uuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid(i).data(), this->uuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->uuid(i), target);
  }
  
  // optional string object_name = 20;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->object_name(), target);
  }
  
  // optional uint32 item_id = 22;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->item_id(), target);
  }
  
  // optional uint32 region_id = 23;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->region_id(), target);
  }
  
  // optional uint32 isp_id = 24;
  if (has_isp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->isp_id(), target);
  }
  
  // optional uint32 start_time = 30;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->start_time(), target);
  }
  
  // optional uint32 end_time = 40;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->end_time(), target);
  }
  
  // optional string user_id = 50;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->user_id(), target);
  }
  
  // repeated .ucloud.unetanalysis.UuidExInfo uuid_ex_info = 60;
  for (int i = 0; i < this->uuid_ex_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->uuid_ex_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNetItemStatsForUserRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string object_name = 20;
    if (has_object_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }
    
    // optional uint32 item_id = 22;
    if (has_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }
    
    // optional uint32 region_id = 23;
    if (has_region_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }
    
    // optional uint32 isp_id = 24;
    if (has_isp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isp_id());
    }
    
    // optional uint32 start_time = 30;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }
    
    // optional uint32 end_time = 40;
    if (has_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }
    
    // optional string user_id = 50;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
  }
  // repeated string uuid = 10;
  total_size += 1 * this->uuid_size();
  for (int i = 0; i < this->uuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uuid(i));
  }
  
  // repeated .ucloud.unetanalysis.UuidExInfo uuid_ex_info = 60;
  total_size += 2 * this->uuid_ex_info_size();
  for (int i = 0; i < this->uuid_ex_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uuid_ex_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNetItemStatsForUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNetItemStatsForUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNetItemStatsForUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNetItemStatsForUserRequest::MergeFrom(const GetNetItemStatsForUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_.MergeFrom(from.uuid_);
  uuid_ex_info_.MergeFrom(from.uuid_ex_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_isp_id()) {
      set_isp_id(from.isp_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNetItemStatsForUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetItemStatsForUserRequest::CopyFrom(const GetNetItemStatsForUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetItemStatsForUserRequest::IsInitialized() const {
  
  return true;
}

void GetNetItemStatsForUserRequest::Swap(GetNetItemStatsForUserRequest* other) {
  if (other != this) {
    uuid_.Swap(&other->uuid_);
    std::swap(object_name_, other->object_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(isp_id_, other->isp_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(user_id_, other->user_id_);
    uuid_ex_info_.Swap(&other->uuid_ex_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNetItemStatsForUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNetItemStatsForUserRequest_descriptor_;
  metadata.reflection = GetNetItemStatsForUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemStatsForUserResponse::kRcFieldNumber;
const int GetItemStatsForUserResponse::kMonitorDataFieldNumber;
#endif  // !_MSC_VER

GetItemStatsForUserResponse::GetItemStatsForUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemStatsForUserResponse::InitAsDefaultInstance() {
  rc_ = const_cast< ::ucloud::ResponseCode*>(&::ucloud::ResponseCode::default_instance());
}

GetItemStatsForUserResponse::GetItemStatsForUserResponse(const GetItemStatsForUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemStatsForUserResponse::SharedCtor() {
  _cached_size_ = 0;
  rc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemStatsForUserResponse::~GetItemStatsForUserResponse() {
  SharedDtor();
}

void GetItemStatsForUserResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rc_;
  }
}

void GetItemStatsForUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemStatsForUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemStatsForUserResponse_descriptor_;
}

const GetItemStatsForUserResponse& GetItemStatsForUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unetanalysis_2e177000_2e178000_2eproto();  return *default_instance_;
}

GetItemStatsForUserResponse* GetItemStatsForUserResponse::default_instance_ = NULL;

GetItemStatsForUserResponse* GetItemStatsForUserResponse::New() const {
  return new GetItemStatsForUserResponse;
}

void GetItemStatsForUserResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rc()) {
      if (rc_ != NULL) rc_->::ucloud::ResponseCode::Clear();
    }
  }
  monitor_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemStatsForUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ucloud.ResponseCode rc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_monitor_data;
        break;
      }
      
      // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monitor_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monitor_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_monitor_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemStatsForUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rc(), output);
  }
  
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  for (int i = 0; i < this->monitor_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->monitor_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemStatsForUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ucloud.ResponseCode rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rc(), target);
  }
  
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  for (int i = 0; i < this->monitor_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->monitor_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemStatsForUserResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ucloud.ResponseCode rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc());
    }
    
  }
  // repeated .ucloud.unetanalysis.MonitorData monitor_data = 20;
  total_size += 2 * this->monitor_data_size();
  for (int i = 0; i < this->monitor_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monitor_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemStatsForUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemStatsForUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemStatsForUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemStatsForUserResponse::MergeFrom(const GetItemStatsForUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  monitor_data_.MergeFrom(from.monitor_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rc()) {
      mutable_rc()->::ucloud::ResponseCode::MergeFrom(from.rc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemStatsForUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemStatsForUserResponse::CopyFrom(const GetItemStatsForUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemStatsForUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rc()) {
    if (!this->rc().IsInitialized()) return false;
  }
  for (int i = 0; i < monitor_data_size(); i++) {
    if (!this->monitor_data(i).IsInitialized()) return false;
  }
  return true;
}

void GetItemStatsForUserResponse::Swap(GetItemStatsForUserResponse* other) {
  if (other != this) {
    std::swap(rc_, other->rc_);
    monitor_data_.Swap(&other->monitor_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemStatsForUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemStatsForUserResponse_descriptor_;
  metadata.reflection = GetItemStatsForUserResponse_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::RecordStatsRequest >, 11, false >
  record_stats_request(kRecordStatsRequestFieldNumber, ::ucloud::unetanalysis::RecordStatsRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::RecordStatsExRequest >, 11, false >
  record_stats_ex_request(kRecordStatsExRequestFieldNumber, ::ucloud::unetanalysis::RecordStatsExRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetNetItemStatsRequest >, 11, false >
  get_net_item_stats_request(kGetNetItemStatsRequestFieldNumber, ::ucloud::unetanalysis::GetNetItemStatsRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetItemStatsResponse >, 11, false >
  get_item_stats_response(kGetItemStatsResponseFieldNumber, ::ucloud::unetanalysis::GetItemStatsResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetNetRankRequest >, 11, false >
  get_net_rank_request(kGetNetRankRequestFieldNumber, ::ucloud::unetanalysis::GetNetRankRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetNetRankResponse >, 11, false >
  get_net_rank_response(kGetNetRankResponseFieldNumber, ::ucloud::unetanalysis::GetNetRankResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetIpsRequest >, 11, false >
  get_ips_request(kGetIpsRequestFieldNumber, ::ucloud::unetanalysis::GetIpsRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetIpsResponse >, 11, false >
  get_ips_response(kGetIpsResponseFieldNumber, ::ucloud::unetanalysis::GetIpsResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::PushIpsFileRequest >, 11, false >
  push_ips_file_request(kPushIpsFileRequestFieldNumber, ::ucloud::unetanalysis::PushIpsFileRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::SetUserLvlRequest >, 11, false >
  set_user_lvl_request(kSetUserLvlRequestFieldNumber, ::ucloud::unetanalysis::SetUserLvlRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::SetUserLvlResponse >, 11, false >
  set_user_lvl_response(kSetUserLvlResponseFieldNumber, ::ucloud::unetanalysis::SetUserLvlResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetUserLvlRequest >, 11, false >
  get_user_lvl_request(kGetUserLvlRequestFieldNumber, ::ucloud::unetanalysis::GetUserLvlRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetUserLvlResponse >, 11, false >
  get_user_lvl_response(kGetUserLvlResponseFieldNumber, ::ucloud::unetanalysis::GetUserLvlResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetNetItemStatsForUserRequest >, 11, false >
  get_net_item_stats_for_user_request(kGetNetItemStatsForUserRequestFieldNumber, ::ucloud::unetanalysis::GetNetItemStatsForUserRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ucloud::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::ucloud::unetanalysis::GetItemStatsForUserResponse >, 11, false >
  get_item_stats_for_user_response(kGetItemStatsForUserResponseFieldNumber, ::ucloud::unetanalysis::GetItemStatsForUserResponse::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace unetanalysis
}  // namespace ucloud

// @@protoc_insertion_point(global_scope)
