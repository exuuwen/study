package ucloud;
/**
 * 所有消息前面均固定添加未编码的4字节无符号整数(网络字节序)表示编码后的消息长度
 * 用于判断接收消息到的消息是否完整用于解析
 * 长度应介于2字节到100M字节之间，解析时会进行检查
 * 注意：后续添加字段的时候只能在后面增加，不要修改已存在的序号，且只能添加可选字段
 **/

// ucloud所有协议的总名字空间
message UMessage {
    // 协议头
    required Head head = 1;

    // 协议体
    required Body body = 2;
};

message Head {
    // 版本号
    required uint32 version = 1;
    // 协议校验标记
    required uint32 magic_flag = 2 [default = 0x12340987];
    // 随机数
    required uint32 random_num = 3;
    // 流水号, 应答包需要与请求报具有相同的flow_no，用于异步请求
    required uint32 flow_no = 4;
    // 会话唯一标识，发起调用处指定，后续不能变化
    required string session_no = 5;
    // 协议类型
    required int32 message_type = 6;
    // 子进程序号
    required int32 worker_index = 7;
    // 染色标志
    optional bool tint_flag = 8;
    // 发送源,体, 仅用于模块见调用
    required uint32 source_entity = 9;
    // 目的实体, 仅用于模块见调用
    optional uint32 dest_entity = 11;
    // 调用目的，用于模块间调用
    optional string call_purpose = 13;
    // 验证信息
    optional bytes access_token = 14;
    // 保留字段
    optional bytes reserved = 15;
    // 客户端IP，仅当首次发起请求时填写
    optional string client_ip = 20;

    // 增加了两个字段，用于转发服务使用
    optional string target_ip = 30;                 // 目标IP
    optional uint32 target_port = 40;               // 目标端口
};

// 消息体所有的内容都是可选的，需要配合消息头中的message_type进行检查，
// 必须有一个消息体
message Body {
    optional SimpleResponse simple_response = 1;
    optional HeartBeatRequest heart_beat_request = 3;
    optional HeartBeatResponse heart_beat_response = 5;
    extensions 100 to max;
};

enum MessageType {
    SIMPLE_RESPONSE = 10;
    HEART_BEAT_REQUEST = 12;
    HEART_BEAT_RESPONSE = 13;
};

// 公共的一些数据结构
message IpPortPair {
    required uint32 ip = 1;
    required uint32 port = 2;
};

// 通用的返回码
message ResponseCode {
    required int32 retcode = 1;                 // 返回值
    optional string error_message = 2;          // 当返回值不为0时，包含错误信息
};

// IP地址信息
message IpAddress {
    required string ip = 1;                     // IP地址
    required uint32 type = 2;                   // IP类型，可能是内网、BGP、电信、联通、移动、东方有线、电信通等等
};

// 简单的返回包
message SimpleResponse {
    required ResponseCode rc = 1;
};

// 心跳请求，有效载荷由通信的双方协定
message HeartBeatRequest {
    repeated bytes payload = 1;
};

// 心跳应答，有效载荷由通信的双方协定
message HeartBeatResponse {
    required ResponseCode rc = 1;
    repeated bytes payload = 2;
};

// 内部协议头，用来标识连接信息
message InternalHead {
    required int32 fd = 10;
    required uint32 peer_addr = 20;
    required int32 peer_port = 30;
    required uint32 sock_addr = 40;
    required int32 sock_port = 50;
};

// 资源类型(原产品类型、对象类型，统一一致)
enum ResourceType {
    RESOURCE_TYPE_UHOST = 1;
    RESOURCE_TYPE_UDISK = 3;
    RESOURCE_TYPE_SHARED_BANDWIDTH = 5;
    RESOURCE_TYPE_UDB = 6;
    RESOURCE_TYPE_UCDN = 7;
    RESOURCE_TYPE_USMS = 9;
    RESOURCE_TYPE_EIP = 10;
    RESOURCE_TYPE_ULB = 11;
    RESOURCE_TYPE_UMEM = 12;
    RESOURCE_TYPE_BANDWIDTH = 13;
    RESOURCE_TYPE_TRAFFIC = 14;
    RESOURCE_TYPE_ECSHOP = 15;
    RESOURCE_TYPE_VPN = 16;
    RESOURCE_TYPE_ACTUAL_BANDWIDTH = 17;
    RESOURCE_TYPE_ACTUAL_BIND_BANDWIDTH = 18;
    RESOURCE_TYPE_PHOST = 20;
    RESOURCE_TYPE_RACK = 21;
    RESOURCE_TYPE_PRIVATE_HOST = 22;
    RESOURCE_TYPE_PRIVATE_VM = 23;
    RESOURCE_TYPE_SAN = 24;
    RESOURCE_TYPE_MONGODB = 25;
    RESOURCE_TYPE_UMR = 26;
    RESOURCE_TYPE_UHIVE = 27;
}
