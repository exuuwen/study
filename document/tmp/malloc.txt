#TITLE Dynamic memory allocator

* malloc
| Function | Description                                                                               |
|----------+-------------------------------------------------------------------------------------------|
| malloc   | allocates the specified number of bytes                                                   |
| realloc  | increases or decrease the size of the specified block of memory. Reallocates it if needed |
| calloc   | allocates the specified number of bytes and initializes them to zero                      |
| free     | releases the specified block of memory back to the system                                 |

** ptmalloc2
Malloc implementation for multiple threads without lock contention.
ptmalloc2, the second version of ptmalloc based on Doug Lea's malloc-2.7.x. This
code has already been included in glibc-2.3.x. In multi-thread Applications,
ptmalloc2 is currently slightly more memory-efficient than ptmalloc3.

*** Supported pointer representation:       4 or 8 bytes
*** Supported size_t  representation:       4 or 8 bytes
    Note that size_t is allowed to be 4 bytes even if pointers are 8.
    You can adjust this by defining INTERNAL_SIZE_T

*** Alignment:                              2 * sizeof(size_t) (default)
    (i.e., 8 byte alignment with 4byte size_t). This suffices for
    nearly all current machines and C compilers. However, you can
    define MALLOC_ALIGNMENT to be wider than this if necessary.

***  Minimum overhead per allocated chunk:   4 or 8 bytes
     Each malloced chunk has a hidden word of overhead holding size
     and status information.

*** Minimum allocated size:
    4-byte ptrs:  16 bytes    (including 4 overhead)
    8-byte ptrs:  24/32 bytes (including, 4/8 overhead)

*** Maximum allocated size:
    4-byte size_t: 2^32 minus about two pages
    8-byte size_t: 2^64 minus about two pages

*** Thread-safety: thread-safe unless NO_THREADS is defined

* Head data structure
** struct malloc_chunk
#+BEGIN_SRC C
struct malloc_chunk {

  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */

  struct malloc_chunk* fd;         /* double links -- used only if free. */
  struct malloc_chunk* bk;

  /* Only used for large blocks: pointer to next larger size.  */
  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
  struct malloc_chunk* bk_nextsize;
};
#+END_SRC
** malloc_chunk details

    Chunks of memory are maintained using a `boundary tag' method as
    described in e.g., Knuth or Standish.  (See the paper by Paul
    Wilson ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a
    survey of such techniques.)  Sizes of free chunks are stored both
    in the front of each chunk and at the end.  This makes
    consolidating fragmented chunks into bigger chunks very fast.  The
    size fields also hold bits representing whether chunks are free or
    in use.

    An allocated chunk looks like this:


    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if allocated            | |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                     |A|M|P|
      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk                                     |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


    Where "chunk" is the front of the chunk for the purpose of most of
    the malloc code, but "mem" is the pointer that is returned to the
    user.  "Nextchunk" is the beginning of the next contiguous chunk.

    Chunks always begin on even word boundries, so the mem portion
    (which is returned to the user) is also on an even word boundary, and
    thus at least double-word aligned.

    Free chunks are stored in circular doubly-linked lists, and look like this:

    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk                            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `head:' |             Size of chunk, in bytes                         |P|
      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    The P (PREV_INUSE) bit, stored in the unused low-order bit of the
    chunk size (which is always a multiple of two words), is an in-use
    bit for the *previous* chunk.  If that bit is *clear*, then the
    word before the current chunk size contains the previous chunk
    size, and can be used to find the front of the previous chunk.
    The very first chunk allocated always has this bit set,
    preventing access to non-existent (or non-owned) memory. If
    prev_inuse is set for any given chunk, then you CANNOT determine
    the size of the previous chunk, and might even get a memory
    addressing fault when trying to do so.

    Note that the `foot' of the current chunk is actually represented
    as the prev_size of the NEXT chunk. This makes it easier to
    deal with alignments etc but can be very confusing when trying
    to extend or adapt this code.

    The two exceptions to all this are

     1. The special chunk `top' doesn't bother using the
        trailing size field since there is no next contiguous chunk
        that would have to index off it. After initialization, `top'
        is forced to always exist.  If it would become less than
        MINSIZE bytes long, it is replenished.

     2. Chunks allocated via mmap, which have the second-lowest-order
        bit M (IS_MMAPPED) set in their size fields.  Because they are
        allocated one-by-one, each must contain its own trailing size field.

** struct malloc_state

#+BEGIN_SRC C
 struct malloc_state {
  /* Serialize access.  */
  mutex_t mutex;

  /* Flags (formerly in max_fast).  */
  int flags;

#if THREAD_STATS
  /* Statistics for locking.  Only used if THREAD_STATS is defined.  */
  long stat_lock_direct, stat_lock_loop, stat_lock_wait;
#endif

  /* Fastbins */
  mfastbinptr      fastbins[NFASTBINS];

  /* Base of the topmost chunk -- not otherwise kept in a bin */
  mchunkptr        top;

  /* The remainder from the most recent split of a small request */
  mchunkptr        last_remainder;

  /* Normal bins packed as described above */
  mchunkptr        bins[NBINS * 2 - 2];

  /* Bitmap of bins */
  unsigned int     binmap[BINMAPSIZE];

  /* Linked list */
  struct malloc_state *next;

  /* Memory allocated from the system in this arena.  */
  INTERNAL_SIZE_T system_mem;
  INTERNAL_SIZE_T max_system_mem;
};

#+END_SRC

** Bins
   An array of bin headers for free chunks. Each bin is doubly
   linked.  The bins are approximately proportionally (log) spaced.
   There are a lot of these bins (128). This may look excessive, but
   works very well in practice.  Most bins hold sizes that are
   unusual as malloc request sizes, but are more usual for fragments
   and consolidated sets of chunks, which is what these bins hold, so
   they can be found quickly.  All procedures maintain the invariant
   that no consolidated chunk physically borders another one, so each
   chunk in a list is known to be preceeded and followed by either
   inuse chunks or the ends of memory.
   
   Chunks in bins are kept in size order, with ties going to the
   approximately least recently used chunk. Ordering isn't needed
   for the small bins, which all contain the same-sized chunks, but
   facilitates best-fit allocation for larger chunks. These lists
   are just sequential. Keeping them in order almost never requires
   enough traversal to warrant using fancier ordered data
   structures.
   
   Chunks of the same size are linked with the most
   recently freed at the front, and allocations are taken from the
   back.  This results in LRU (FIFO) allocation order, which tends
   to give each chunk an equal opportunity to be consolidated with
   adjacent freed chunks, resulting in larger free chunks and less
   fragmentation.
   
   To simplify use in double-linked lists, each bin header acts
   as a malloc_chunk. This avoids special-casing for headers.
   But to conserve space and improve locality, we allocate
   only the fd/bk pointers of bins, and then use repositioning tricks
   to treat these as the fields of a malloc_chunk*.

**  Fastbins

    An array of lists holding recently freed small chunks.  Fastbins
    are not doubly linked.  It is faster to single-link them, and
    since chunks are never removed from the middles of these lists,
    double linking is not necessary. Also, unlike regular bins, they
    are not even processed in FIFO order (they use faster LIFO) since
    ordering doesn't much matter in the transient contexts in which
    fastbins are normally used.

    Chunks in fastbins keep their inuse bit set, so they cannot
    be consolidated with other free chunks. malloc_consolidate
    releases all chunks in fastbins and consolidates them with
    other free chunks.

    /* The maximum fastbin request size we support */
    #define MAX_FAST_SIZE     80

**  Top

    The top-most available chunk (i.e., the one bordering the end of
    available memory) is treated specially. It is never included in
    any bin, is used only if no other chunk is available, and is
    released back to the system if it is very large (see
    M_TRIM_THRESHOLD).  Because top initially
    points to its own bin with initial zero size, thus forcing
    extension on the first malloc request, we avoid having any special
    code in malloc to check whether it even exists yet. But we still
    need to do so when getting memory from system, so we make
    initial_top treat the bin as a legal but unusable chunk during the
    interval between initialization and the first call to
    sYSMALLOc. (This is somewhat delicate, since it relies on
    the 2 preceding words to be zero during this interval as well.)
    
** Unsorted chunks

    All remainders from chunk splits, as well as all returned chunks,
    are first placed in the "unsorted" bin. They are then placed
    in regular bins after malloc gives them ONE chance to be used before
    binning. So, basically, the unsorted_chunks list acts as a queue,
    with chunks being placed on it in free (and malloc_consolidate),
    and taken off (to be either used or placed in bins) in malloc.

    The NON_MAIN_ARENA flag is never set for unsorted chunks, so it
    does not have to be taken into account in size comparisons.

    /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */
    #define unsorted_chunks(M)          (bin_at(M, 1))

**   Indexing

    Bins for sizes < 512 bytes contain chunks of all the same size, spaced
    8 bytes apart. Larger bins are approximately logarithmically spaced:

    64 bins of size       8
    32 bins of size      64
    16 bins of size     512
     8 bins of size    4096
     4 bins of size   32768
     2 bins of size  262144
     1 bin  of size what's left

    There is actually a little bit of slop in the numbers in bin_index
    for the sake of speed. This makes no difference elsewhere.

    The bins top out around 1MB because we expect to service large
    requests via mmap.

** Binmap

    To help compensate for the large number of bins, a one-level index structure
    is used for bin-by-bin searching.  `binmap' is a bitvector recording whether
    bins are definitely empty so they can be skipped over during during
    traversals.  The bits are NOT always cleared as soon as bins are empty, but
    instead only when they are noticed to be empty during traversal in malloc.

** Arena - malloc_state
   There are several instances of this struct ("arenas") in this
   malloc.  If you are adapting this malloc in a way that does NOT use
   a static or mmapped malloc_state, you MUST explicitly zero-fill it
   before using. This malloc relies on the property that malloc_state
   is initialized to all zeroes (as is true of C statics).  */

   static struct malloc_state main_arena;

   /* There is only one instance of the malloc parameters.  */
   static struct malloc_par mp_;

** reference
 - Definition of malloc in IEEE Std 1003.1 standard
   http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html
 - The design of the basis of the glibc allocator
   http://gee.cs.oswego.edu/dl/html/malloc.html
 - Gloger, Wolfram; The ptmalloc homepage
   http://www.malloc.de/en/index.html
