1. close
a. 当Local socket fd执行close后。不能在对该fd进行任何操作，否则会返回错误:Bad file descriptor. 
b. 默认情况close后发发生两种行为。1）当Local socket receive buffer里面还有数据的时候直接向Remote发送RST。2）如果里面没有数据就按照正常的Tcp结束流程发送FIN.
c. Local socket执行close后，当发送RST时Remote socket读写都会产生错误：connection reset by peer。当Local 发送FIN结束时候，Remote socket读取到0字节数据以及能poll到POLLRDHUP ；Remote write第一次成功，数据传送到Local socket后发现该socket已经关闭，然后会发送一个RST给remote socket来直接终止连接，这时候Remote socket再次write会产生SiGPipe信号导致进程终止。


2. Resource temporarily unavailable（EAGAIN or EWOULDBLOCK）
Nonblock socket 读写时产生的错误
a. read: 当没有数据接收的时候进行read
b. write:当send buffer被写满的时候进行write


3. listen(fd,  backlog)
backlog 是一个积压值，他表示内核能维护的最多未完成三次握手连接的tcp链接数目，所有未完成链接由一个队列维护，当一个链接过程完成内核会将其一处队列。通常client通过connect发起连接，即使server暂时没有进行accept，3次握手也会在内核完成，当server进行accept后可以将该连接读取。


4. accept
Server端可以将连接到的socket fd设为Nonblock模式
fd = accept4(sock, (struct sockaddr *) &addr, &addr_len, O_NONBLOCK);


5. connect错误：失败后该fd不能再connect只能close后重新socket
a． 路由不可到达连接20s左右，返回错误：Connection refused
b． 主机端口无socket监听：主机端发送RST告知该端口无人监听。返回错误：Connection refused


6. SetSendBufferSize  GetSendBufferSize
int SetSendBufferSize(int sock, unsigned int size)                                                                      
{                                                                                                                  
	size_t opt = size;    
	int ret = -1;                                                      
	                                                                                                             
	ret = setsockopt(sock, SOL_SOCKET, SO_SNDBUF, &opt, sizeof(opt));                                                
	                                                                                                             
	return ret;                                                                                                            
}

unsigned int GetSendBufferSize(int sock)                                                                               
{                                                                                                                  
	size_t opt = 0;                                                                                                
	socklen_t len = sizeof(opt); 
                                                                                                           
	getsockopt(sock, SOL_SOCKET, SO_SNDBUF, &opt, &len);   				   	
	return opt;                                                                                                                                                                                                   
}  

Receive buffer 将SO_SNDBUF改为 SO_RCVBUF
Buffer size的最大值/proc/sys/net/core/wmem_max， 超过这个值也只能被设定为这个值不会出错。


7. 半关闭：连接的一端关闭写功能，能读取数据。
a. shutdown(fd, SHUT_WR)；发送FIN出去。
b. shutdown(fd, SHUT_RD)；不能再读到有效数据，内核把所有收到的数据报文都会扔掉；只能读取到0数据以及POLLRDHUP事件，但是对方并没有关闭。
c. shutdown和socket描述符没有关系，即使调用shutdown(fd, SHUT_RDWR)也不会关闭fd，最终还需close(fd)。
d. 当Local socket 进行半关闭写操作后，再向该fd进行write会产生SigPipe信号导致进程终止。
e. 当有多个socket描述符指向同一socket对象时，调用close时首先会递减该对象的引用计数，计数为0时才会发送FIN包结束TCP连接。shutdown不同，只要以SHUT_WR/SHUT_RDWR方式调用即发送FIN包。


8. TCP_NODELAY：关闭Nagle算法减少delay
void sockets::SetTcpNoDelay(int sockfd, int on)
{
    int optval = on ? 1 : 0;
    if (::setsockopt(sockfd, IPPROTO_TCP, TCP_NODELAY, &optval, sizeof optval) < 0)
    {
        err_msg(errno, "Sockets::SetTcpNoDelay, %s", on?"on":"off");
    }
}


9. 半打开连接(Half-open):由于对端关闭或者异常终止（硬件故障等），而本方并不知道。Keep-alive用来检测半打开状态
int SetKeepalive(int sock, int time, int intvl, int probes)
{
    int start = 1;
    if (setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &start, sizeof(int)) < 0)
        return -1;
    if (setsockopt(sock, SOL_TCP, TCP_KEEPIDLE, &time, sizeof(int)) < 0)
        return -1;
    if (setsockopt(sock, SOL_TCP, TCP_KEEPINTVL, &intvl, sizeof(int)) < 0)
        return -1;
    if (setsockopt(sock, SOL_TCP, TCP_KEEPCNT, &probes, sizeof(int)) < 0)
        return -1;
    return 0;
}
probes:探测次数
intvl:每次探测间隔时间
time：探测超时

如果一直在socket上有数据来往就不会触发keepalive,但是如果time秒一直没有数据往来，则keep alive开始工作：发送探测包，受到响应则认为网络，是好的，结束探测；如果没有相应就每隔intvl秒发探测包，一共发送probes次，probes次后仍没有相应，就关闭连接。这时候再对该fd进行读写， 就会返回错误: connection timed out.


10. SO_LINGER
a. 在close中发现recv buffer有数据的话就直接发送RST，默认close操作后socket会试着把send buffer里面的数据全部发送出去。不过不管是non-block还是block的fd，close后会都立即返回0。
b. 如果设置SO_LINGER可以强制close发送RST而不是FIN，并且丢弃send buffer里面的数据。当SO_LINGER选项开启但超时值time为0时，调用close直接发送RST（这样能避免进入TIME_WAIT状态，但破坏了TCP协议的正常工作方式），SO_LINGER对shutdown无影响。SetSoLinger（fd, 1, 0）;

c. 当设置SO_LINGER选项开启但超时值time不为0的时候。对于fd不管是block还是non-block，(recv buffer 没数据)close操作会被阻塞(在这期间收到对方的报文立即发送RST)，直到所有数据发送完并且被对方确认或超时值到，并且总是返回0。如果是超时的话，尽可能的发送数据完成FIN状态。设置SO_LINGER最多能(没超时)在close后知道发送的数据被对端确认，但是并不一定应用层已经读到数据， 除非你用shutdown半关闭写，读取对方最后的FIN。SetSoLinger（fd, 1, 5）.

int SetSoLinger(int sockfd, int on, int time)
{
	struct linger so_linger;

	so_linger.l_onoff = on;
	so_linger.l_linger = time;

	int ret = setsockopt(sockfd, SOL_SOCKET, SO_LINGER, &so_linger, sizeof(so_linger));

	return ret;
}


11. NON_BLOCK
int SetNonBlock(int sock)
{
	int flags = fcntl(sock, F_GETFL, 0);
	if(flags < 0)
	{
		perror("fcntl F_GETFL");
       		return -1;
	}
    	flags |= O_NONBLOCK;
    	if (fcntl(sock, F_SETFL, flags) < 0)
    	{
        	perror(	"sockets::SetNonBlockAndCloseOnExec, non_blocking");
		return -1;
    	}
	
	return 0;
}

a. connect
The socket is nonblocking and the connection cannot be completed immediately.  It is possible to select(2)  or  poll(2)  for  completion  by selecting  the socket for writing.  After select(2) indicates writability, use getsockopt(2) to read the SO_ERROR option at level SOL_SOCKET to determine whether connect() completed successfully (SO_ERROR is zero) or unsuccessfully.

int GetSocketError(int sockfd)
{
    int optval;
    socklen_t optlen = sizeof optval;
    if (getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &optval, &optlen) < 0)
    {
        return errno;
    }
    else
    {
        return optval;
    }
}
int SetRecvBufferSize(int sock, unsigned int size)                                                                      
{                                                                                                                  
	size_t opt = size;    
	int ret = -1;                                                      
	                                                                                                             
	ret = setsockopt(sock, SOL_SOCKET, SO_RCVBUF, &opt, sizeof(opt));                                                
	                                                                                                             
	return ret;                                                                                                            
}  

SetNonBlock(sock);
ret = connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr));   
int savedErrno = (ret == 0) ? 0 : errno;                                                 
switch (savedErrno)
{
            case 0:
            case EINPROGRESS:
            case EINTR:
            case EISCONN:
                {
			if (SocketWritable(sock, TIMEOUT) > 0)
			{
				if (GetSocketError(sock) == 0)
				{
					printf("connect success\n");
					break;
				}
			}
			
		       
                }                                                                                                  
	    default:   
		perror("connect server fail:");   
		close(sock);                                                             
		return -1;                                                                                               
}       

b. accept: non-block模式下如果没有连接就去accept会返回错误：EAGAIN or EWOULDBLOCK
int SocketReadable(int sockfd, int tmo_ms)
{
    struct pollfd socketToPoll[1];
    socketToPoll[0].fd = sockfd;
    socketToPoll[0].events = POLLIN|POLLPRI;
    socketToPoll[0].revents = 0;

    return (poll(socketToPoll, 1, tmo_ms) > 0) && (socketToPoll[0].revents & (POLLIN|POLLPRI));
}

SetNonBlock(sock);
ret = SocketReadable(sock, -1); 
	if(ret != 1)
	{
		printf("accept1 server fail\n");                                                                
		return -1; 
	}                 
                                                        
	addr_len = sizeof(addr);                                                                                       
	fd = accept4(sock, (struct sockaddr *) &addr, &addr_len, O_NONBLOCK);                                                       
	if (fd == -1)                                                                                                  
	{          
		printf("accept server fail\n");                                                                
		return -1;                                                                                               
	}       


12. port and IP address
a. server：通常port和IP都是指定bind的，如果bind port为0就直接内核马上选择一个端口，bind ip为0由下面进行设置。如果没有指定bind那么：
Port: listen的时候系统指定，对改socket 永恒不变
IP：把连接对方发送的syc报文的目的地址作为该连接服务器的地址， 永恒不变。但是这个时候这个ip只是对于connfd来说 原始的sockfd还是0（没bind）

b. client: 通常不需要bind。
Port: 在connect时候由内核选定，对该链接是不变的。
IP：把connect时候，发送数据包interface的ip设为该socket源ip， 是永恒不变的。

unsigned short get_local_port(int sock)
{	
	struct sockaddr addr;
    	int len = sizeof(addr);

    	if (getsockname(sock, &addr, (unsigned *)&len) != 0)
       		return 0;

   	 if (addr.sa_family != AF_INET)
       	 	return 0;
	
	return ntohs(((struct sockaddr_in *)(&addr))->sin_port);
}

unsigned int get_local_ip(int sd)
{
	struct sockaddr addr;
	int len = sizeof(addr);

	if (getsockname(sd, &addr, (unsigned *)&len) != 0)
	{
		return 0;
	}

	if (addr.sa_family != AF_INET)
	{
		return 0;
	}

	return ntohl(((struct sockaddr_in *)(&addr))->sin_addr.s_addr);
}


13. 慢启动&拥塞控制，快速重传
通告窗口nwn(byte)， 拥塞窗口cwn(number of MSS)， 门限threshold(number of MSS)
每次发送数据不能超过cwn*MSS，nwn的最大值.
a. 当收到新的ack后，如果cwn < threshold, cwn+1(慢启动)。否则cwn + 1/cnw
b. 当收到重复的ack后， threshold=cwn/2
c. 当超时重传timeout后， 设置cwn=1(开始慢启动),  threshold=cwn/2。重发数据。

快速重传优化
当连续收到第三个重复的ack后，设置threshold=cwn/2，如果窗口允许就立即重传。设置cwn=shreshold+3。
还继续 收到重复的ack，设置cwn=cwn+1，如果窗口允许就立即重传。
当新的ack来后，设置cwn=threshold。


14. 糊涂窗口避免
当发送端应用进程产生数据很慢、或接收端应用进程处理接收缓冲区数据很慢，或二者兼而有之；就会使应用进程间传送的报文段很小，特别是有效载荷很小。 极端情况下，有效载荷可能只有1个字节；而传输开销有40字节(20字节的IP头+20字节的TCP头) 这种现象就叫糊涂窗口综合症。

接收端：
a. 窗口通告延迟
当缓冲没有空间后立即发送0窗口通告，直到一个MSS空间或者一半的缓冲空间就发送更新窗口。或者发送端的坚持定时间到期发送窗口探寻的时候发送窗口通告（如果没有一个MSS空间或者一半的缓冲空间依旧发送0窗口通告）
b.  延迟ack
等待缓冲多点缓冲空间，有新的数据来可以一起ack，有发送数据组合一起发送。

发送端：
a. 如果该包含有FIN，则允许发送；
b. 如果包长度达到MSS，则允许发送；
c. 否则，没有设置TCP_CORK并且设置了TCP_NODELAY选项，则允许发送，关闭了nagle算法。
d. 否则，没有设置TCP_CORK并且开启那个了算法，所有发出去的小数据包（包长度小于MSS）均被确认，则允许发。； 
e. 上述条件都未满足，但发生了超时（一般为200ms），则立即发送。


15. Poll state
a. 可读可写
POLLIN There is data to read.
POLLOUT   Writing now will not block.

b. HUP
POLLRDHUP:对端close或者本端read shutdown
POLLHUP:在本端有写操作的情况下对端close或者write shutdown 



