1. daemon program
A daemon (or service) is a background process that is designed to run autonomously,with little or not user intervention. It usually starts and ends with the operation system.

2. create a daemon program
a. manual  
1) fork a program and make it running in backgroud: end the parent program
if(pid = fork()) 
    exit(0);  

2) get rid of the terminate control: make it in a new session
setsid();

3) prohibit the program obtaining the terminate again: the program should not be the process group leader 
if(pid = fork()) 
    exit(0); 

4) close all the opened file description
for(i=0; i<NOFILE; ++i)
    close(i); 

5) change the work dirctory and file umask
chdir("/tmp");
umask(0);

6) ignore the SIGCHLD signal
signal(SIGCHLD,SIG_IGN); 

void init_daemon(void)
{  
    pid_t pid;  
    int i;  
    pid = fork();  
    
    if(pid > 0)
    { 
        exit(0);  
    }
    else if(pid < 0 )
    {  
        perror("fork fail:");  
        exit(1);  
    }
       
    setsid();
    pid = fork();
    if(pid > 0)
    { 
        exit(0);  
    }
    else if(pid < 0 )
    {  
        perror("fork2 fail:");  
        exit(1);  
    }

    chdir("/tmp");
    umask(0);
    for(i=0; i<NOFILE; ++i)
        close(i);  

    signal(SIGCHLD,SIG_IGN);

    return ;  
} 

b. lib function
#include <unistd.h>
int daemon(int nochdir, int noclose);
If nochdir is zero, daemon() changes the calling process's current working directory to the root directory  ("/");  otherwise, the current working directory is left unchanged.
If noclose is zero, daemon() redirects standard input, standard output and standard error to /dev/null; otherwise, no changes are made to these file descriptors.
