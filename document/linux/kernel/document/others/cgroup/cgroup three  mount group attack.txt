1.	Cgroup init
In the start_kenel init the cgroup basic global variable:

/*
 * The "rootnode" hierarchy is the "dummy hierarchy", reserved for the
 * subsystems that are otherwise unattached - it never has more than a
 * single cgroup, and all tasks are part of that cgroup.
 */
static struct cgroupfs_root rootnode;
static struct css_set init_css_set;
static struct cg_cgroup_link init_css_set_link;
static int css_set_count;
static struct hlist_head css_set_table[CSS_SET_TABLE_SIZE];
#define dummytop (&rootnode.top_cgroup)
int __init cgroup_init_early(void)
{
	int i;
	atomic_set(&init_css_set.refcount, 1);
	INIT_LIST_HEAD(&init_css_set.cg_links);
	INIT_LIST_HEAD(&init_css_set.tasks);
	INIT_HLIST_NODE(&init_css_set.hlist);
	css_set_count = 1;
	init_cgroup_root(&rootnode);
	root_count = 1;
	/*set the init_task as init_ css_set */
	init_task.cgroups = &init_css_set;

	/*link rootnode.top_cgroup and init_css_set to init_css_set_link*/
	init_css_set_link.cg = &init_css_set;
	init_css_set_link.cgrp = dummytop;
	list_add(&init_css_set_link.cgrp_link_list,
		 &rootnode.top_cgroup.css_sets);
	list_add(&init_css_set_link.cg_link_list,
		 &init_css_set.cg_links);
	/*init the css_set hash table*/
	for (i = 0; i < CSS_SET_TABLE_SIZE; i++)
		INIT_HLIST_HEAD(&css_set_table[i]);
	for (i = 0; i < CGROUP_SUBSYS_COUNT; i++) {
		struct cgroup_subsys *ss = subsys[i];

		/* early init the subsystem */
		if (!ss || ss->module)
			continue;

		if (ss->early_init)
			cgroup_init_subsys(ss);
	
}
int __init cgroup_init(void)
{
	for (i = 0; i < CGROUP_SUBSYS_COUNT; i++) {
		struct cgroup_subsys *ss = subsys[i];

		/* init the subsystem */
		if (!ss || ss->module)
			continue;
		if (!ss->early_init)
			cgroup_init_subsys(ss);
		if (ss->use_id)
			cgroup_init_idr(ss, init_css_set.subsys[ss->subsys_id]);
	}

	/* Add init_css_set to the hash table */
	hhead = css_set_hash(init_css_set.subsys);
	hlist_add_head(&init_css_set.hlist, hhead);

	err = register_filesystem(&cgroup_fs_type);
	if (err < 0) {
		kobject_put(cgroup_kobj);
		goto out;
	}

	proc_create("cgroups", 0, NULL, &proc_cgroupstats_operations);
}

static void __init cgroup_init_subsys(struct cgroup_subsys *ss)
{
	struct cgroup_subsys_state *css;

	printk(KERN_INFO "Initializing cgroup subsys %s\n", ss->name);

	/* init base cftset, link the subsystem files to the cgroup_subsys */
	cgroup_init_cftsets(ss);
			// ss->base_cftset.cfts = ss->base_cftypes;
			//list_add_tail(&ss->base_cftset.node, &ss->cftsets);

	/* Create the top cgroup state for this subsystem */
	list_add(&ss->sibling, &rootnode.subsys_list);
	ss->root = &rootnode;
	css = ss->css_alloc (dummytop);
	init_cgroup_css(css, ss, dummytop);
		// css->cgroup = dummytop;	
		// set_bit(CSS_ROOT, &css->flags);
		// dummytop ->subsys[ss->subsys_id] = css;		

	init_css_set.subsys[ss->subsys_id] = dummytop->subsys[ss->subsys_id];
}

static struct file_system_type cgroup_fs_type = {
	.name = "cgroup",
	.mount = cgroup_mount,
	.kill_sb = cgroup_kill_sb,
};

2.	Create a root
Create a Root named Rootname with one or several subsystems on directory mount_point
mount 每t cgroup  Rootname 每o subsys1[,subsys2＃]   mount_point
struct cgroup_sb_opts {
	unsigned long subsys_mask;
	char *name;
	struct cgroupfs_root *new_root; 
};
struct dentry *cgroup_mount(struct file_system_type *fs_type,
			 int flags, const char *unused_dev_name,  void *data)
{
	struct cgroup_sb_opts opts;
	struct cgroupfs_root *root;
/* Get the opts from the data  Rootname 每o subsys1[,subsys2＃]  
set_bit(i, &opts->subsys_mask);*/
	ret = parse_cgroupfs_options(data, &opts);
	/*create a new root*/
	new_root = cgroup_root_from_opts(&opts);
			//root = kzalloc(sizeof(*root), GFP_KERNEL);
			//init_cgroup_root(root);
//root->subsys_mask = opts->subsys_mask;
	opts.new_root = new_root;
	/* Locate an existing or new sb for this hierarchy.  If the same Root ( same name && same subsytems) is create and return the old one or create a new one */
	sb = sget(fs_type, cgroup_test_super, cgroup_set_super, 0, &opts);
	root = sb->s_fs_info;
	if (root == opts.new_root) {
		/* We used the new root structure, so this is a new hierarchy */
		struct list_head tmp_cg_links;
		struct cgroup *root_cgrp = &root->top_cgroup;
		/*create the root dir */
		ret = cgroup_get_rootdir(sb); 
//inode->i_op = &cgroup_dir_inode_operations;
// .mkdir = cgroup_mkdir,
/* 
a.  check whether all the subsystem in subsys_mask are enable and don＊t mount in other Root with different subsys_mask
 mount 每t cgroup  -o suba,subb  point1  and mount 每t cgroup  -o suba,subc  point2 
		Is error  BUSY for suba in different Root with different subsys_mask
		b.  init the cgrp =  root->top_cgroup and cgrp->subsys[i]
		struct cgroup_subsys *ss = subsys[i]
		cgrp->subsys[i] = dummytop->subsys[i];
		cgrp->subsys[i]->cgroup = cgrp;
		list_move(&ss->sibling, &root->subsys_list);
		ss->root = root;
*/
		ret = rebind_subsystems(root, root->subsys_mask);
		/* create new cg_links for each css_set in current system*/
		ret = allocate_cg_links(css_set_count, &tmp_cg_links);
		/*link Root to roots and increase the number*/
		list_add(&root->root_list, &roots);
		root_count++;
		sb->s_root->d_fsdata = root_cgrp; // store the top group in sb
		root->top_cgroup.dentry = sb->s_root; //store the dentry of sb to top_cgroup
/*link each css_set to this top group, so all the tasks is attached to the top group in this Root*/
		for (i = 0; i < CSS_SET_TABLE_SIZE; i++) {
			struct hlist_head *hhead = &css_set_table[i];
			struct hlist_node *node;
			struct css_set *cg; 
			hlist_for_each_entry(cg, node, hhead, hlist);
				link_css_set(&tmp_cg_links, cg, root_cgrp);
		}
		/*create the Root and subsystem files according to subsys_mask*/
cgroup_populate_dir(root_cgrp, true, root->subsys_mask);
}
	else {
		/*We re-used an existing hierarchy - the new root (if any) is not needed */
		/* mount 每t cgroup  -o suba,subb  point1 and mount 每t cgroup  -o suba,subb  point2 
Is ok, the share the same sb. It means if we modify one, the other one also be modified*/
		cgroup_drop_root(opts.new_root);
	}
	return dget(sb->s_root);
}

Files in basic Root:
static struct cftype files[] = {
	{
		.name = "tasks",
		.open = cgroup_tasks_open,
		.write_u64 = cgroup_tasks_write,
		.release = cgroup_pidlist_release,
		.mode = S_IRUGO | S_IWUSR,
	},
	＃..
}
int cgroup_populate_dir(struct cgroup *cgrp, bool base_files,  unsigned long subsys_mask)
{
	struct cgroup_subsys *ss; 
	if (base_files) {
		/*create the base Root file*/
		err = cgroup_addrm_files(cgrp, NULL, files, true);
	}
	/* create file for each subsystem */
	for_each_subsys(cgrp->root, ss) {
		struct cftype_set *set;
		if (!test_bit(ss->subsys_id, &subsys_mask))
			continue;
		/*files is linked in the cgroup_init_cftsets  for each subsystem*/
		list_for_each_entry(set, &ss->cftsets, node)
			cgroup_addrm_files(cgrp, ss, set->cfts, true);
				// inode = cgroup_new_inode(mode, sb)
				// inode->i_fop = &cgroup_file_operations
	}
}
static const struct file_operations cgroup_file_operations = {
	.read = cgroup_file_read,
	.write = cgroup_file_write,
	.llseek = generic_file_llseek,
	.open = cgroup_file_open,
	.release = cgroup_file_release,
};

3.	Create a group in a Root
When create a Root a top group is created automatic. All the tasks attach to this group.
User also can create a group with mkdir command.
# mkdir mount_point/exuuwen
Sb->inode->i_op->mkdir
static int cgroup_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
{
	struct cgroup *c_parent = dentry->d_parent->d_fsdata;

	/* the vfs holds inode->i_mutex already */
	return cgroup_create(c_parent, dentry, mode | S_IFDIR);
} 

static long cgroup_create(struct cgroup *parent, struct dentry *dentry, umode_t mode)
{
	struct cgroupfs_root *root = parent->root;;
	struct super_block *sb = root->sb;
	/*allocate a cgroup*/
	cgrp = kzalloc(sizeof(*cgrp), GFP_KERNEL);
	/*init the cgroup*/
	init_cgroup_housekeeping(cgrp);
	cgrp->parent = parent;
	cgrp->root = parent->root;
	cgrp->top_cgroup = parent->top_cgroup;

	/*create each subsystem object cgroup_subsys_state*/
	for_each_subsys(root, ss) {
		struct cgroup_subsys_state *css;
		css = ss->css_alloc (cgrp);
		init_cgroup_css(css, ss, cgrp); /*init the css*/
			// css->cgroup = cgrp;
			// cgrp->subsys[ss->subsys_id] = css;
	}
	/*add group to his parent＊s children*/
	list_add(&cgrp->sibling, &cgrp->parent->children);
	root->number_of_cgroups++;
	/*create dir for the group*/
	err = cgroup_create_dir(cgrp, dentry, mode);
	/*add to his Root*/
	list_add_tail(&cgrp->allcg_node, &root->allcg_list);

	//online each group
	for_each_root_subsys(root, ss) {
		struct cgroup_subsys_state *css = css_ar[ss->subsys_id];
		err = online_css(css);
	}

	/*create the Root and subsystems files according to the subsys_mask*/
	err = cgroup_populate_dir(cgrp, true, root->subsys_mask);
	return 0;
}


4.	Attach task to a group
# echo   pid > mount_point/exuuwen/tasks
cgroup_file_write->cgroup_tasks_write (struct cgroup *cgrp, u64 pid, bool threadgroup)
{
if (pid) {
tsk = find_task_by_vpid(pid);
		} else
			tsk = current;
		ret = cgroup_attach_task(cgrp, tsk);
}
int cgroup_attach_task(struct cgroup *cgrp, struct task_struct *tsk)
{
	/* find the old group in the same Root*/
	oldcgrp = task_cgroup_from_root(tsk, root);
	/* check each subsys whether can attach
	for_each_subsys(root, ss) {
		if (ss->can_attach) {
			retval = ss->can_attach(cgrp, &tset);
			if (retval) {
				goto out;
			}
	}
	/*find a new css set according to new group and old css_set*/
	newcg = find_css_set(tsk->cgroups, cgrp);
	/*migrate the task to new group*/
	cgroup_task_migrate(cgrp, oldcgrp, tsk, newcg);
		// oldcg = tsk->cgroups; put_css_set(oldcg);
		// rcu_assign_pointer(tsk->cgroups, newcg); list_move(&tsk->cg_list, &newcg->tasks);
	/*attach to each subsys*/
	for_each_subsys(root, ss) {
		if (ss->attach)
			ss->attach(cgrp, &tset);
	}
}
struct css_set *find_css_set(struct css_set *oldcg, struct cgroup *cgrp)
{
	/*if find one in same subsystem and in the same group of each Root after  moving to the new group*/
	struct css_set *res = find_existing_css_set(oldcg, cgrp, template);
	if (res)
		return res;
	res = kmalloc(sizeof(*res), GFP_KERNEL);
	if (!res)
		return NULL;
/* Allocate all the cg_cgroup_link objects that will be linked to each group in each Root */
	if (allocate_cg_links(root_count, &tmp_cg_links) < 0) {
		kfree(res);
		return NULL;
	}
	/*linked new css_set to each group*/
	list_for_each_entry(link, &oldcg->cg_links, cg_link_list) {
		struct cgroup *c = link->cgrp;
		if (c->root == cgrp->root)
			c = cgrp;
		link_css_set(&tmp_cg_links, res, c);
	}
	css_set_count++;
	/* Add this cgroup group to the hash table */
	hhead = css_set_hash(res->subsys);
	hlist_add_head(&res->hlist, hhead);
}




