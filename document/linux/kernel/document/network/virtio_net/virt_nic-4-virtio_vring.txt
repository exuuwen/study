宿主机和虚拟机间通信主要是通过virtqueue进行, 而在virtqueue中依靠vring资源共享通信
struct vring_virtqueue
{
	struct virtqueue vq;

	/* Actual memory layout for this queue */
	struct vring vring;
	.........
	
	void *data[];
};

1. virtqueue 
查找并初始化每个vq, 返回virtqueue 其实是vring_virtqueue

irqreturn_t vring_interrupt(int irq, void *_vq)
{
	struct vring_virtqueue *vq = to_vvq(_vq);

	/*对于virtio_net来说就是skb_recv_done和skb_xmit_done*/
	if (vq->vq.callback)
		vq->vq.callback(&vq->vq);

	return IRQ_HANDLED;
}

setup_vq-->struct virtqueue *vring_new_virtqueue(unsigned int index,
				      unsigned int num,
				      unsigned int vring_align,
				      struct virtio_device *vdev,
				      bool weak_barriers,
				      void *pages,
				      bool (*notify)(struct virtqueue *),
				      void (*callback)(struct virtqueue *),
				      const char *name)
{
	struct vring_virtqueue *vq;

	/*分配vring_virtqueue. num为vq的长度 根据io寄存器VIRTIO_PCI_QUEUE_NUM获得*/
	vq = kmalloc(sizeof(*vq) + sizeof(void *)*num, GFP_KERNEL);
	vq->vq.callback = callback;
	vq->vq.vdev = vdev;
	vq->vq.name = name;
	vq->vq.num_free = num;

	vq->free_head = 0;
	for (i = 0; i < num-1; i++) {
		vq->vring.desc[i].next = i+1;
		vq->data[i] = NULL;
	}
	vq->data[i] = NULL;

	return &vq->vq;
	
}
int vp_find_vqs(struct virtio_device *vdev, unsigned nvqs,
                       struct virtqueue *vqs[],
                       vq_callback_t *callbacks[],
                       const char *names[])
{
        1. 请求中断向量为每个queue
         vp_request_msix_vectors(vdev, nvectors, per_vq_vectors);

        2. 为每个queue 分配vring_virtqueue, 初始化callback, name. 其中包含了virtqueue，以及真实的队列vring的分配和初始化
        vqs[i] = setup_vq(vdev, i, callbacks[i], names[i], msix_vec);

        3. 为每个想量请求中断, 当中断相应,就会调用vq->callback
        err = request_irq(vp_dev->msix_entries[msix_vec].vector,
                                  vring_interrupt, 0,
                                  vp_dev->msix_names[msix_vec]);
}


2. vring
a. vring 初始化
/* Virtio ring descriptors: 16 bytes.  These can chain together via "next". */
struct vring_desc {
	/* Address (guest-physical). */
	__u64 addr;
	/* Length. */
	__u32 len;
	__u16 flags;
	/* We chain unused descriptors via this, too */
	__u16 next;
};

struct vring_avail {
	__u16 flags;
	__u16 idx;
	__u16 ring[];
};

/* u32 is used here for ids for padding reasons. */
struct vring_used_elem {
	/* Index of start of used descriptor chain. */
	__u32 id;
	/* Total length of the descriptor chain which was used (written to) */
	__u32 len;
};

struct vring_used {
	__u16 flags;
	__u16 idx;
	struct vring_used_elem ring[];
};

struct vring {
	unsigned int num;
	struct vring_desc *desc;
	struct vring_avail *avail;
	struct vring_used *used;
};
vring的大小: num位queue的长度, 根据io VIRTIO_PCI_QUEUE_NUM读取
static inline unsigned vring_size(unsigned int num, unsigned long align)
{
	return ((sizeof(struct vring_desc) * num + sizeof(__u16) * (3 + num)
		 + align - 1) & ~(align - 1))
		+ sizeof(__u16) * 3 + sizeof(struct vring_used_elem) * num;
}

/*setup_vq中关于vring初始化*/
setup_vq(struct virtio_device *vdev, unsigned index,
				  void (*callback)(struct virtqueue *vq),
				  const char *name,
				  u16 msix_vec)
{
	/*配置寄存器 设置当前配置的queue*/
	iowrite16(index, vp_dev->ioaddr + VIRTIO_PCI_QUEUE_SEL);
	/*分配vring 并且设置其虚拟地址给QUEUE寄存器, 使得宿主机知道该地址传递给vhost*/
	size = PAGE_ALIGN(vring_size(num, VIRTIO_PCI_VRING_ALIGN));
	info->queue = alloc_pages_exact(size, GFP_KERNEL|__GFP_ZERO);
	iowrite32(virt_to_phys(info->queue) >> VIRTIO_PCI_QUEUE_ADDR_SHIFT,
		  vp_dev->ioaddr + VIRTIO_PCI_QUEUE_PFN);

	vring_init(&vq->vring, num, pages, vring_align);
}

b. vring的layout
static inline void vring_init(struct vring *vr, unsigned int num, void *p,
			      unsigned long align)
{
	vr->num = num;
	vr->desc = p;
	vr->avail = p + num*sizeof(struct vring_desc);
	vr->used = (void *)(((unsigned long)&vr->avail->ring[num] + sizeof(__u16)
		+ align-1) & ~(align - 1));
}

struct vring {
	// The actual descriptors (16 bytes each)
	struct vring_desc desc[num];

	// A ring of available descriptor heads with free-running index.
	__u16 avail_flags;
	__u16 avail_idx;
	__u16 available[num];
	__u16 used_event_idx;

	// Padding to the next align boundary.
	char pad[];

	// A ring of used descriptor heads with free-running index.
	__u16 used_flags;
	__u16 used_idx;
	struct vring_used_elem used[num];
	__u16 avail_event_idx;
};

a. desc ring: 提供能给设备使用的buffer, 包含内存地址, 长度
flags:
/* This marks a buffer as continuing via the next field. */
#define VRING_DESC_F_NEXT   1

/* This marks a buffer as write-only (otherwise read-only). */
#define VRING_DESC_F_WRITE     2

/*如果flag带有VRING_DESC_F_NEXT, next表示下一个连续块的idx*/
 u16 next;

b. avail ring: 表示可以提供给设备的desc
VRING_AVAIL_F_NO_INTERRUPT	1
flag: 1表示当设备消耗了描述符后不需要产生中断, delay 中断到index为used_event_idx的used ring entry被写

c. used ring: 表示在设备操作完后,设备可以return的desc
VRING_USED_F_NO_NOTIFY	1
flag: 1表示当设备return描述符后不需要通知, delay 通知到index为avail_event_idx的avail ring entry被写


3. virtqueue的使用
a. 首先提供buffer给设备desc, 获取free的desc
b. 将buffer desc idx提供给avail ring(宿主机处理后会吧idx放到used ring上)
c. 回收used ring处理后发


