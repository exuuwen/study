1. 虚拟机网卡的工作
a. 宿主机
在宿主机上主要有三块
1) qemu: 负责模拟虚拟机额网卡设备virtio, 以PCI设备呈现给虚拟机。作为信令面，配置vhost_net驱动与虚拟机通信, 关联vhost_net与tun driver
2) vhost_net模块: 数据面的加速模块。负责在内核态报文数据流的读取, 避免数据流传递给用户态的qemu
3) tun driver: 宿主机上的虚拟网卡, vhost_net与tun dirver相连。
tun driver收到外网的报文后, 会将报文的数据以字符设备形式传递给vhost_net(数据报文skb变成数据流)。vhost_net收到虚拟机传递出来的数据报文, 将数据以字符设备形式传递给tun driver进入宿主机(数据流变成数据报文skb)

2. tun driver
tun driver:是一个具有字符设备功能的虚拟网卡.
a. 收发
当用户open设备字符文件/dev/net/tun, 对fd通过SETIFF创建一个网卡设备。用户态对fd的写操作, 就会把写的数据组成一个数据报文skb, 注入系统skb->dev为建立的虚拟网卡。当在主机有数据是发往所建立的虚拟网卡设备, 网卡设备会将数据报文内容提取出来, 用户态可以通过读取fd来获取数据
b. 多对列
tun driver支持多对列, 当用户多次打开/dev/net/tun文件, 每个fd都SETIFF到同一个网卡设备。网卡设备就是一个多对列设备, 每个fd对应一个队列

1).init
static const struct file_operations tun_fops = {
	.owner	= THIS_MODULE,
	.unlocked_ioctl	= tun_chr_ioctl,
	.open	= tun_chr_open,
	.aio_read  = tun_chr_aio_read,
	.aio_write = tun_chr_aio_write
};

static struct miscdevice tun_miscdev = {
	.name = "tun",
	.nodename = "net/tun",
	.fops = &tun_fops,
};

int tun_init()
{
	misc_register(&tun_miscdev); 
}

2). open
/* Ops structure to mimic raw sockets with tun */
static const struct proto_ops tun_socket_ops = {
	.sendmsg = tun_sendmsg,
	.recvmsg = tun_recvmsg,
};

static struct proto tun_proto = {
	.name		= "tun",
	.obj_size	= sizeof(struct tun_file),
};
int tun_chr_open(struct inode *inode, struct file * file)
{
	/*创建一个sock, 一个tfile代表一个打开的fd*/
	tfile = (struct tun_file *)sk_alloc(&init_net, AF_UNSPEC, GFP_KERNEL,
					    &tun_proto);
	/*socket将会被vhost_net使用*/
	tfile->socket.file = file;
	tfile->socket.ops = &tun_socket_ops;
}


3). create/attach to a tun nic
static const struct net_device_ops tap_netdev_ops = {
	.ndo_start_xmit		= tun_net_xmit,
};

tun_chr_ioctl--TUNSETIFF-->tun_set_iff
int tun_set_iff(struct net *net, struct file *file, struct ifreq *ifr)
{
	dev = __dev_get_by_name(net, ifr->ifr_name);
	/*如果dev存在, 必须是tap或者tun netdev 这时候相当于增加一个queue*/
	if (dev) {
		if ((ifr->ifr_flags & IFF_TUN) && dev->netdev_ops == &tun_netdev_ops)
			tun = netdev_priv(dev);
		else if ((ifr->ifr_flags & IFF_TAP) && dev->netdev_ops == &tap_netdev_ops)
			/*tun是net_dev的priv*/
			tun = netdev_priv(dev);
		else
			return -EINVAL;
		/*请求和关联的tun必须都是MULTIQUEUE的*/
		if (!!(ifr->ifr_flags & IFF_MULTI_QUEUE) !=
		    !!(tun->flags & TUN_TAP_MQ))
			return -EINVAL;	

		/*tfile attach到tun上*/
		tun_attach(tun, file, ifr->ifr_flags & IFF_NOFILTER);
		//tfile->queue_index = tun->numqueues;
		//rcu_assign_pointer(tfile->tun, tun);
		//rcu_assign_pointer(tun->tfiles[tun->numqueues], tfile);
		//tun->numqueues++;
		//tun_set_real_num_queues(tun);
	}
	else {
		int queues = ifr->ifr_flags & IFF_MULTI_QUEUE ?
			     MAX_TAP_QUEUES : 1;
		/*分配net_dev*/
		dev = alloc_netdev_mqs(sizeof(struct tun_struct), name,
				       tun_setup, queues, queues);
		tun = netdev_priv(dev);
		tun->dev = dev;
		tun->flags = flags;
		
		/*file attach到tun*/
		tun_attach(tun, file, false);
		/*register tun*/
		register_netdevice(tun->dev);
	}
	
}

4). 收发
a. 发送
/*驱动函数发送放到sock recevive queue上*/
tun_net_xmit(struct sk_buff *skb, struct net_device *dev)
{
	int txq = skb->queue_mapping
	tfile = rcu_dereference(tun->tfiles[txq]);
	
	skb_queue_tail(&tfile->socket.sk->sk_receive_queue, skb);

	/*唤醒sk上的等待队列, vhost_net会注册wait到这个waitqueue上*/
	tfile->socket.sk->sk_data_ready(tfile->socket.sk);
}

/*vhost_net通过sock->ops.recvmsg或者用户态对fd read来接收*/
tun_chr_aio_read/tun_recvmsg-->tun_do_read
{
	/*从sock receive queue上读取*/
	skb = __skb_recv_datagram(tfile->socket.sk, noblock ? MSG_DONTWAIT : 0,
				  &peeked, &off, &err);
	ret = tun_put_user(tun, tfile, skb, iv, len);
}

b.接收
/*vhost_net通过sock->ops.sendmsg或者用户态对fd write来注入给tun*/
tun_chr_aio_write/tun_sendmsg---->tun_get_user
{
	/*分配skb*/
	skb = tun_alloc_skb(tfile, align, copylen, linear, noblock);
	/*copy内容到skb*/
	skb_copy_datagram_from_iovec(skb, 0, iv, offset, len);

	/*解析L2,skb->dev为tun->dev, 设置L3*/
	skb->protocol = eth_type_trans(skb, tun->dev);
	skb_reset_network_header(skb);
	skb_probe_transport_header(skb, 0);

	/*注入协议栈*/
	netif_rx_ni(skb);
}


