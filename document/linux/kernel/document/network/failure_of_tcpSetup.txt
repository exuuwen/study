1. 服务器收到第一个syn的时候

int tcp_v4_conn_request(struct sock *sk, struct sk_buff *skb)
{
	/*tcp_syncookies为2 进行syn cookie
	  tcp_syncookies为1 且request队列满了 进行syn cookie处理
	  tcp_syncookies为0 且request队列满了 将该syn报文drop掉
	*/
	if ((sysctl_tcp_syncookies == 2 ||
	     inet_csk_reqsk_queue_is_full(sk)) && !isn) {
		want_cookie = tcp_syn_flood_action(sk, skb, "TCP");
		if (!want_cookie)
			goto drop;
	}

	/* Accept backlog is full. If we have already queued enough
	 * of warm entries in syn queue, drop request. 
	 */
	if (sk_acceptq_is_full(sk) && inet_csk_reqsk_queue_young(sk) > 1) {
		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);
		goto drop;
}

2. 服务气收到最后一个ack
struct sock *tcp_check_req()
{
	child = inet_csk(sk)->icsk_af_ops->syn_recv_sock(sk, skb, req, NULL);//tcp_v4_syn_recv_sock
	if (child == NULL)
		goto listen_overflow;
	.....

	/*如果开启tcp_abort_on_overflow不仅丢弃该报文，而且发送rst*/
	listen_overflow:
	if (!sysctl_tcp_abort_on_overflow) {
		inet_rsk(req)->acked = 1;
		return NULL;
	}

embryonic_reset:
	if (!(flg & TCP_FLAG_RST)) {
		/* Received a bad SYN pkt - for TFO We try not to reset
		 * the local connection unless it's really necessary to
		 * avoid becoming vulnerable to outside attack aiming at
		 * resetting legit local connections.
		 */
		req->rsk_ops->send_reset(sk, skb);
	} 
}

struct sock *tcp_v4_syn_recv_sock()
{
	/*接收队列满后返回NULL*/
	if (sk_acceptq_is_full(sk))
		goto exit_overflow;

	/*new sk分配失败也返回NULL*/
	newsk = tcp_create_openreq_child(sk, req, skb);
	if (!newsk)
		goto exit_nonewsk;
}

3. 客户端syn丢失 tcp_retryx
4. syn+ack丢失//synack_retry
