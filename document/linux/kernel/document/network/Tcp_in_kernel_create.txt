struct proto tcp_prot = {
	.name			= "TCP",
	.owner			= THIS_MODULE,
	.close			= tcp_close,
	.connect		= tcp_v4_connect,
	.disconnect		= tcp_disconnect,
	.accept			= inet_csk_accept,
	.ioctl			= tcp_ioctl,
	.init			= tcp_v4_init_sock,
	.destroy		= tcp_v4_destroy_sock,
	.shutdown		= tcp_shutdown,
	.setsockopt		= tcp_setsockopt,
	.getsockopt		= tcp_getsockopt,
	.recvmsg		= tcp_recvmsg,
	.sendmsg		= tcp_sendmsg,
	.sendpage		= tcp_sendpage,
	.backlog_rcv		= tcp_v4_do_rcv,
	.release_cb		= tcp_release_cb,
	.mtu_reduced		= tcp_v4_mtu_reduced,
	.hash			= inet_hash,
	.unhash			= inet_unhash,
	.get_port		= inet_csk_get_port,
	.enter_memory_pressure	= tcp_enter_memory_pressure,
	.stream_memory_free	= tcp_stream_memory_free,
	.sockets_allocated	= &tcp_sockets_allocated,
	.orphan_count		= &tcp_orphan_count,
	.memory_allocated	= &tcp_memory_allocated,
	.memory_pressure	= &tcp_memory_pressure,
	.sysctl_mem		= sysctl_tcp_mem,
	.sysctl_wmem		= sysctl_tcp_wmem,
	.sysctl_rmem		= sysctl_tcp_rmem,
	.max_header		= MAX_TCP_HEADER,
	.obj_size		= sizeof(struct tcp_sock),
	.slab_flags		= SLAB_DESTROY_BY_RCU,
	.twsk_prot		= &tcp_timewait_sock_ops,
	.rsk_prot		= &tcp_request_sock_ops,
	.h.hashinfo		= &tcp_hashinfo,
	.no_autobind		= true,
#ifdef CONFIG_COMPAT
	.compat_setsockopt	= compat_tcp_setsockopt,
	.compat_getsockopt	= compat_tcp_getsockopt,
#endif
#ifdef CONFIG_MEMCG_KMEM
	.init_cgroup		= tcp_init_cgroup,
	.destroy_cgroup		= tcp_destroy_cgroup,
	.proto_cgroup		= tcp_proto_cgroup,
#endif
};

1. create
inet_create
{
    /*
	it create a tcp_sock(tcp_prot->obj_size) that contains some sub type of sock
    tcp_sock-->inet_connection_sk-->inet_sock-->sock
    */
    sk = sk_alloc(net, PF_INET, GFP_KERNEL, tcp_prot);

	sock_init_data(sock, sk);
	/*
	skb_queue_head_init(&sk->sk_receive_queue);
	skb_queue_head_init(&sk->sk_write_queue);
	sk->sk_rcvbuf		=	sysctl_rmem_default;/*set the buffer*/
	sk->sk_sndbuf		=	sysctl_wmem_default;
	sk->sk_state		=	TCP_CLOSE; /*set the state*/
	*/

	if (sk->sk_prot->init) {
		/*tcp_init_sock*/
		err = sk->sk_prot->init(sk);
		/*
			//set up retransmit(icsk->icsk_retransmit_timer, tcp_write_timer), delay ack(icsk->icsk_delack_timer, tcp_delack_timer), keepalive timer(sk->sk_timer, tcp_keepalive_timer)
			tcp_init_xmit_timers(sk);
		
			//Sending congestion window, #define TCP_INIT_CWND
			tp->snd_cwnd = TCP_INIT_CWND;
			// Slow start size threshold, #define TCP_INFINITE_SSTHRESH	0x7fffffff*/
			tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;
			//Do not allow snd_cwnd to grow above this*/
			tp->snd_cwnd_clamp = ~0;
			tp->mss_cache = TCP_MSS_DEFAULT;

			sk->sk_sndbuf = sysctl_tcp_wmem[1];// /proc/sys/net/ipv4/tcp_wmem
			sk->sk_rcvbuf = sysctl_tcp_rmem[1];// /proc/sys/net/ipv4/tcp_rmem
		*/
	}
}


2. hash
There are three hash list in the tcp system: established, listening, bind hash
ehash: in an established tcp connection find the socket through src ip, dst ip, src port, dst port
bhash: when a socket bind to an ip/port, it will hash to bhash. It can avoid repeating binding.
listen: when a server socket start listen with ip/port, it will hash to lhash. when a new connection request comes in, it will find the server 
socket through dst ip and dst port

struct inet_hashinfo {
struct inet_ehash_bucket	*ehash;
struct inet_bind_hashbucket	*bhash;
struct inet_listen_hashbucket	listening_hash[INET_LHTABLE_SIZE];
};

3. bind
inet_bind
{
	/*check the addr(multicast, broadcast, local) through the local route table */
	chk_addr_ret = inet_addr_type(net, addr->sin_addr.s_addr);
	
	/*
	allow socket bind with nolocal ip. 
	1. sysctl_ip_nonlocal_bind(/proc/sys/net/ipv4/ip_nonlocal_bind): the whole system
	2. inet->freebind: per socket(sock opt IP_FREEBIND)
	*/
	if (!sysctl_ip_nonlocal_bind &&
	    !(inet->freebind || inet->transparent) &&
	    addr->sin_addr.s_addr != htonl(INADDR_ANY) &&
	    chk_addr_ret != RTN_LOCAL &&
	    chk_addr_ret != RTN_MULTICAST &&
	    chk_addr_ret != RTN_BROADCAST)
		goto out;

	/*if port is less than 1024, the euid should be zero(root)*/
	snum = ntohs(addr->sin_port);
	err = -EACCES;
	if (snum && snum < PROT_SOCK &&
	    !ns_capable(net->user_ns, CAP_NET_BIND_SERVICE))
		goto out;

	/*must be in CLOSE state and a socket can only bind one time*/
	if (sk->sk_state != TCP_CLOSE || inet->inet_num)
		goto out_release_sock;

	/*set the rcv and send inet src addr for this socket*/
	inet->inet_rcv_saddr = inet->inet_saddr = addr->sin_addr.s_addr;
	
	/*
	a. choose a port if snum is 0
	b. check the port got from snum if it can be used
	c. add it to bhash
	*/
	sk->sk_prot->get_port(sk, snum);//inet_csk_get_port
	/*
		inet->inet_num = snum;
	*/

	/*set src port, dst addr and port*/
	inet->inet_sport = htons(inet->inet_num);
	inet->inet_daddr = 0;
	inet->inet_dport = 0;
}


3. listen

struct request_sock_queue {
    /*accept queue*/
    struct request_sock *rskq_accept_head;
    struct request_sock *rskq_accept_tail;
    .....
    /* half open hash queue */
    struct listen_sock  *listen_opt;
}

struct listen_sock {
    u8          max_qlen_log;
    int         qlen;
    int         qlen_young;
    u32         nr_table_entries;
    struct request_sock *syn_table[0];
};

inet_listen
{
	/*socket must be in the status of close or listen*/
	old_state = sk->sk_state;
	if (!((1 << old_state) & (TCPF_CLOSE | TCPF_LISTEN)))
		goto out;

	if (old_state != TCP_LISTEN)
		inet_csk_listen_start(sk, backlog);
		/*
			//allocate the half open queue: icsk->icsk_accept_queue->listen_opt
			reqsk_queue_alloc(&icsk->icsk_accept_queue, nr_table_entries);
		
			sk->sk_max_ack_backlog = 0;
			sk->sk_ack_backlog = 0;
			// set sk state to listen
			sk->sk_state = TCP_LISTEN;
	
			//check the src port that bind. if non-src port chose one and hash it to bhash
			if (!sk->sk_prot->get_port(sk, inet->inet_num)) {
				inet->inet_sport = htons(inet->inet_num);
				//hash sk to listen hash
				sk->sk_prot->hash(sk);
			}
		*/
	/*set the max accept queue(compelete the three handshake*/
	sk->sk_max_ack_backlog = backlog;
}


int inet_csk_get_port(struct sock *sk, unsigned short snum)
{
	1. if snum is empty then create new one, or check the snum can be used for this new socket(reused addr/port)
	it will create a new bhash bucket or use old one 
	struct inet_bind_bucket *tb = xxx;
	
	2. hash and link it 
	success:
	if (!inet_csk(sk)->icsk_bind_hash)
		inet_bind_hash(sk, tb, snum);
		//inet_sk(sk)->inet_num = snum;
		//hlist_add_head(&sk->sk_bind_node, &tb->owners);
		//tb->num_owners++;
		//inet_csk(sk)->icsk_bind_hash = tb;
}


