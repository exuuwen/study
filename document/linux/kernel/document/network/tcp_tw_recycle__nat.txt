tcp_timestamps
默认情况下tcp开启tcp_timestamps防止序号绕回(PAWS)，每个tcp报文头都带有时间戳(jiffies), 每当收到一个报文，会比较是否比上次记录的新。
void tcp_rcv_established()
{
	/* If PAWS failed, check it more carefully in slow path */
	if ((s32)(tp->rx_opt.rcv_tsval - tp->rx_opt.ts_recent) < 0)
}

当进入TIME_WAIT状态的链接继续收到报文的时候, 会检查时间戳收否有效。如果有效并且是新的syn链接请求则让新的链接建立。
tcp_timewait_state_process
{
	paws_reject = tcp_paws_reject(&tmp_opt, th->rst);
}

tcp_tw_recycle
通常进入TIME_WAIT状态的链接需要60s的时间回收。
当系统开启tcp_tw_recycle, tcp连接进入的TIME_WAIT的端口将会快速回收(rto)。在这种情况下链接被回收后，为了防止60s内重复报文，整个系统会保存一份每对端IP的时间戳记录
void tcp_time_wait(struct sock *sk, int state, int timeo)
{
	/*开启tw_recycle时记录对端IP的时间戳*/
	if (tcp_death_row.sysctl_tw_recycle && tp->rx_opt.ts_recent_stamp)
		recycle_ok = tcp_remember_stamp(sk);

	if (recycle_ok) 
	{
		tw->tw_timeout = rto;
	} else {
		tw->tw_timeout = TCP_TIMEWAIT_LEN; //60s
	}
}

当有新的链接请求从同一对端IP发启的时候，内核会进行防止PAWS检测(60s内)。当第一个host1通过nat连接到server，server关闭连接后。又一个host2 60s内通过同一nat连接server，如果host2的jiffies比host1的jiffies小，则该连接请求会被认为是旧报文导致PAWS而拒绝
tcp_v4_conn_request()
{
	if (tmp_opt.saw_tstamp && tcp_death_row.sysctl_tw_recycle &&
		(dst = inet_csk_route_req(sk, &fl4, req)) != NULL &&
		    fl4.daddr == saddr) {
			if (!tcp_peer_is_proven(req, dst, true)) {
				NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSPASSIVEREJECTED);
				goto drop_and_release;
			}
		}
}
