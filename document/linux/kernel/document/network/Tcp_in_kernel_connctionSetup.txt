1. send syn with connect
int inet_stream_connect
{
	/*socket must be in close state*/
	if (sk->sk_state != TCP_CLOSE)
		goto out;
	/*tcp_v4_connect*/
	err = sk->sk_prot->connect(sk, uaddr, addr_len);

	timeo = sock_sndtimeo(sk, flags & O_NONBLOCK);
	if (!timeo || !inet_wait_for_connect(sk, timeo, writebias))// wait on sk->sk_wq->wait
		goto out;

	if (sk->sk_state == TCP_CLOSE)
		goto sock_error;

	sock->state = SS_CONNECTED;
	err = 0;
out:
	return err;
}


tcp_v4_connect
{
	nexthop = daddr = usin->sin_addr.s_addr;
	orig_sport = inet->inet_sport;
	orig_dport = usin->sin_port;
	fl4 = &inet->cork.fl.u.ip4;

	/*
	It used for choose the src addr and dst if through route table
	1. set sk->bound_dev_if and non-set inet->inet_addr without bind
	lookup the route with dst addr and oif(bound_dev_if), if find the route then send it
	inet->inet_addr = bound_dev_if->ip_addr;

	2. non-set sk->bound_dev_if and non-set inet->inet_addr without bind
	lookup the route with dst addr, if find the route and get oif, then send it
	inet->inet_addr = oif->ip_addr;

	3. set sk->bound_dev_if and set inet->inet_addr with bind
	lookup the route with dst addr and oif(bound_dev_if), if find the route then send it
	
	4. non-set sk->bound_dev_if and set inet->inet_addr with bind
	lookup the route with dst addr, if find the route then send it	
	*/
	
	rt = ip_route_connect(fl4, nexthop, inet->inet_saddr,
			      RT_CONN_FLAGS(sk), sk->sk_bound_dev_if,
			      IPPROTO_TCP,
			      orig_sport, orig_dport, sk);

	inet->inet_dport = usin->sin_port;
	inet->inet_daddr = daddr;

	/*set the socket state to syn send*/
	tcp_set_state(sk, TCP_SYN_SENT);
	
	/*get the src port if there is no-bind and hash it to the bhash
	hash the src/dst ip/port to the ehash*/
	err = inet_hash_connect(&tcp_death_row, sk);

	/*get the new route*/
	rt = ip_route_newports(fl4, rt, orig_sport, orig_dport, inet->inet_sport, inet->inet_dport, sk);

	/*send the syn packet and setup the retransmit timer*/
	tcp_connect(sk);
}

inet_hash_connect(&tcp_death_row, sk);
{
	/*get tb and hash it to bhash*/
	inet_bind_hash(sk, tb, port);	
	
	inet->inet_sport = htons(lport);
	/*hash it to ehash*/	
	__inet_hash_nolisten(sk);
	//sk->sk_hash = inet_sk_ehashfn(sk);
	//head = inet_ehash_bucket(hashinfo, sk->sk_hash);
	//__sk_nulls_add_node_rcu(sk, &head->chain);
}

2. server receive syn
int tcp_v4_rcv(struct sk_buff *skb)
{
	th = tcp_hdr(skb);
	iph = ip_hdr(skb);

	/*find the socket through ehash or lhash, in this situation it is lhash*/
	sk = __inet_lookup_skb(&tcp_hashinfo, skb, th->source, th->dest);

	tcp_v4_do_rcv(sk, skb);
}

the server sk is in the LISETN state
there two case for state is LISTEN
a. syn send from a new client
b. ack send back from a client that already complete the first two syn and syn+ack. half open connection

int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
{
	if (sk->sk_state == TCP_LISTEN) {
		/*find if it is a half open connection, if it is, get a new sk or the server sk*/
		struct sock *nsk = tcp_v4_hnd_req(sk, skb);
	}
	
	if (nsk != sk) {
		/*b case: the last ack of the three handshake send back from client */
		if (tcp_child_process(sk, nsk, skb)) {
			rsk = nsk;
			goto reset;
		}
		return 0;
	}

	/*a case: a new client syn request*/
	tcp_rcv_state_process(sk, skb, tcp_hdr(skb), skb->len);
}

int tcp_rcv_state_process()
{
	switch (sk->sk_state) {
	....
	case TCP_LISTEN:
		if (th->ack)
			return 1;

		if (th->rst)
			goto discard;

		if (th->syn) {
			if (th->fin)
				goto discard;
			if (icsk->icsk_af_ops->conn_request(sk, skb) < 0)//tcp_v4_conn_request
				return 1;
}

/*store the half open connection*/
struct request_sock {
	struct sock_common		__req_common;
	......
};

struct request_sock_queue {
	/*accept queue*/
	struct request_sock	*rskq_accept_head;
	struct request_sock	*rskq_accept_tail;
	.....
	/* half open hash queue */
	struct listen_sock	*listen_opt;
}

struct listen_sock {
	u8			max_qlen_log;
	int			qlen;
	int			qlen_young;
	u32			nr_table_entries;
	struct request_sock	*syn_table[0];
};

int tcp_v4_conn_request()
{
	/*if the accet queue full and there also is half open connection*/
	if (sk_acceptq_is_full(sk) && inet_csk_reqsk_queue_young(sk) > 1) {
		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);
		goto drop;
	}

	/*create a req and init it*/
	req = inet_reqsk_alloc(&tcp_request_sock_ops);
	ireq = inet_rsk(req);
	ireq->ir_loc_addr = daddr;
	ireq->ir_rmt_addr = saddr;
	ireq->ir_rmt_port = tcp_hdr(skb)->source;
	ireq->ir_num = ntohs(tcp_hdr(skb)->dest);

	........

	/*make the syn+ack skb and send it*/
	skb_synack = tcp_make_synack(sk, dst, req);
	ip_build_and_send_pkt(skb_synack, sk, ireq->ir_loc_addr,
		     ireq->ir_rmt_addr, ireq->opt);

	/*add the req to the server sk half open queue icsk->icsk_accept_queue->listen_opt->sys_table[hash]*/
	inet_csk_reqsk_queue_hash_add(sk, req, TCP_TIMEOUT_INIT);	
}


3. client recieve the syn+ack
int tcp_v4_rcv(struct sk_buff *skb)
{
	th = tcp_hdr(skb);
	iph = ip_hdr(skb);

	/*find the socket through ehash or lhash, in this situation it is ehash*/
	sk = __inet_lookup_skb(&tcp_hashinfo, skb, th->source, th->dest);

	tcp_v4_do_rcv(sk, skb);
}

int tcp_v4_do_rcv-->tcp_rcv_state_process()
{
	switch (sk->sk_state) {
	case TCP_SYN_SENT:
		queued = tcp_rcv_synsent_state_process(sk, skb, th, len);
	}
}

int tcp_rcv_synsent_state_process()
{
	if (th->ack) {
		if (th->rst) {
			tcp_reset(sk);
			goto discard;
		}

		if (!th->syn)
			goto discard_and_undo;

		/*handle the ack*/
		tcp_ack(sk, skb, FLAG_SLOWPATH);
		
		/*change the state to ESTABLISKED and wake up the connect which is block*/
		tcp_finish_connect(sk, skb);
		//tcp_set_state(sk, TCP_ESTABLISHED);
		//sk->sk_state_change(sk);/*sock_def_wakeup: wake up sk->sk_wq->wait*/
		//sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);
	
		/* send back the last ack*/
		tcp_send_ack(sk)
	}
}


4. server rcv the last ack
int tcp_v4_rcv(struct sk_buff *skb)
{
	th = tcp_hdr(skb);
	iph = ip_hdr(skb);

	/*find the socket through ehash or lhash, in this situation it is lhash*/
	sk = __inet_lookup_skb(&tcp_hashinfo, skb, th->source, th->dest);

	tcp_v4_do_rcv(sk, skb);
}

the server sk is in the LISETN state
there two case for state is LISTEN
a. syn send from a new client
b. ack send back from a client that already complete the first two syn and syn+ack. half open connection

int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)
{
	if (sk->sk_state == TCP_LISTEN) {
		/*find if it is a half open connection, if it is, get a new sk or the server sk*/
		struct sock *nsk = tcp_v4_hnd_req(sk, skb);
	}
	
	if (nsk != sk) {
		/*b case: the last ack of the three handshake send back from client */
		if (tcp_child_process(sk, nsk, skb)) {
			rsk = nsk;
			goto reset;
		}
		return 0;
	}

	/*a case: a new client syn request*/
	tcp_rcv_state_process(sk, skb, tcp_hdr(skb), skb->len);
}

int tcp_v4_hnd_req()
{
	/*find the req in the half open queue of the server sk*/ 
	struct request_sock *req = inet_csk_search_req(sk, &prev, th->source,
						       iph->saddr, iph->daddr);
	if (req)
		return tcp_check_req(sk, skb, req, prev, false);

	return sk;
}

struct sock* tcp_check_req()
{
	__be32 flg = tcp_flag_word(th) & (TCP_FLAG_RST|TCP_FLAG_SYN|TCP_FLAG_ACK);
	if (!(flg & TCP_FLAG_ACK))
		return NULL;

	/*create the child sock for the finish the connection setup*/	
	struct sock* child = inet_csk(sk)->icsk_af_ops->syn_recv_sock(sk, skb, req, NULL);
	if (child == NULL)
		goto listen_overflow;

	/*unlink the req from the half open queue and remove it*/
	inet_csk_reqsk_queue_unlink(sk, req, prev);
	inet_csk_reqsk_queue_removed(sk, req);

	/*add the the req to the server sk recieve queue: rqe->child = sk*/
	inet_csk_reqsk_queue_add(sk, req, child);
	return child;

/*rest if tcp_abort_on_overflow enabel*/
listen_overflow:
	if (sysctl_tcp_abort_on_overflow) {
		if (!(flg & TCP_FLAG_RST))
			req->rsk_ops->send_reset(sk, skb);
	}
}

struct sock *tcp_v4_syn_recv_sock()
{
	/*create sock and init it with req*/
	if (sk_acceptq_is_full(sk))
		goto exit_overflow;
	
	/*create newsk and init it*/
	newsk = tcp_create_openreq_child(sk, req, skb);
	//struct sock *newsk = sk_clone_lock(sk, priority);
	//newsk->sk_state = TCP_SYN_RECV;
	ireq		      = inet_rsk(req);
	newinet->inet_daddr   = ireq->ir_rmt_addr;
	newinet->inet_rcv_saddr = ireq->ir_loc_addr;
	newinet->inet_saddr	      = ireq->ir_loc_addr;
	.......

	/*hash the bhash*/
	if (__inet_inherit_port(sk, newsk) < 0)
		goto put_and_exit;
	/*hash the ehash*/
	__inet_hash_nolisten(newsk, NULL);

	return newsk;
}


when out of the tcp_v4_hnd_req there is a newsk so goto the case b
int tcp_child_process(sk, nsk, skb)-->int tcp_rcv_state_process()
{
	acceptable = tcp_ack(sk, skb, FLAG_SLOWPATH |
				      FLAG_UPDATE_TS_RECENT) > 0;

	switch (sk->sk_state) {
		case TCP_SYN_RECV:
			/*set newsk to ESTABLISHED*/
			tcp_set_state(sk, TCP_ESTABLISHED);
			/*wake up the accept which is blocked*/
			sk->sk_state_change(sk);	
	}
}

5. accept
int inet_accept()
{
	struct sock *sk2 = sk1->sk_prot->accept(sk1, flags, &err);//inet_csk_accept
	newsock->state = SS_CONNECTED;
}

struct sock* inet_csk_accept()
{
	if (sk->sk_state != TCP_LISTEN)
		goto out_err;

	/* Find already established connection in the accept queue */
	if (reqsk_queue_empty(queue)) {
		long timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);

		/* If this is a non blocking socket don't sleep */
		error = -EAGAIN;
		if (!timeo)
			goto out_err;

		error = inet_csk_wait_for_connect(sk, timeo);// wait on sk->sk_wq->wait
		if (error)
			goto out_err;
	}

	/*got req from the req queue and get newsk*/
	req = reqsk_queue_remove(queue);
	newsk = req->sk;
	
	sk_acceptq_removed(sk);

	out:
	release_sock(sk);
	if (req)
		__reqsk_free(req);
}
